
Athena_Lab3_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004da4  08004da4  00005da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e78  08004e78  00006018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e78  08004e78  00005e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e80  08004e80  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e80  08004e80  00005e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e84  08004e84  00005e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004e88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a80  20000018  08004ea0  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a98  08004ea0  00006a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d98  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038fa  00000000  00000000  0001cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  000206e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001220  00000000  00000000  00021e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ddfe  00000000  00000000  000230b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c17  00000000  00000000  00050eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001146e4  00000000  00000000  00069ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e1a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f8  00000000  00000000  0017e1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001844e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004d8c 	.word	0x08004d8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	08004d8c 	.word	0x08004d8c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	69db      	ldr	r3, [r3, #28]
 8000210:	f003 0310 	and.w	r3, r3, #16
 8000214:	2b10      	cmp	r3, #16
 8000216:	d101      	bne.n	800021c <LL_USART_IsActiveFlag_IDLE+0x18>
 8000218:	2301      	movs	r3, #1
 800021a:	e000      	b.n	800021e <LL_USART_IsActiveFlag_IDLE+0x1a>
 800021c:	2300      	movs	r3, #0
}
 800021e:	4618      	mov	r0, r3
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	69db      	ldr	r3, [r3, #28]
 8000236:	f003 0320 	and.w	r3, r3, #32
 800023a:	2b20      	cmp	r3, #32
 800023c:	d101      	bne.n	8000242 <LL_USART_IsActiveFlag_RXNE+0x18>
 800023e:	2301      	movs	r3, #1
 8000240:	e000      	b.n	8000244 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	69db      	ldr	r3, [r3, #28]
 800025c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000260:	2b80      	cmp	r3, #128	@ 0x80
 8000262:	d101      	bne.n	8000268 <LL_USART_IsActiveFlag_TXE+0x18>
 8000264:	2301      	movs	r3, #1
 8000266:	e000      	b.n	800026a <LL_USART_IsActiveFlag_TXE+0x1a>
 8000268:	2300      	movs	r3, #0
}
 800026a:	4618      	mov	r0, r3
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000276:	b480      	push	{r7}
 8000278:	b083      	sub	sp, #12
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2210      	movs	r2, #16
 8000282:	621a      	str	r2, [r3, #32]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800029c:	b29b      	uxth	r3, r3
 800029e:	b2db      	uxtb	r3, r3
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80002b8:	78fb      	ldrb	r3, [r7, #3]
 80002ba:	b29a      	uxth	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	619a      	str	r2, [r3, #24]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	4013      	ands	r3, r2
 80002fe:	041a      	lsls	r2, r3, #16
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	43d9      	mvns	r1, r3
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	400b      	ands	r3, r1
 8000308:	431a      	orrs	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	619a      	str	r2, [r3, #24]
}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
	...

0800031c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000320:	4a08      	ldr	r2, [pc, #32]	@ (8000344 <MX_FREERTOS_Init+0x28>)
 8000322:	2100      	movs	r1, #0
 8000324:	4808      	ldr	r0, [pc, #32]	@ (8000348 <MX_FREERTOS_Init+0x2c>)
 8000326:	f001 ffc3 	bl	80022b0 <osThreadNew>
 800032a:	4603      	mov	r3, r0
 800032c:	4a07      	ldr	r2, [pc, #28]	@ (800034c <MX_FREERTOS_Init+0x30>)
 800032e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  //========= Add Code at this area begin =========

  UsartTaskHandle = osThreadNew(UartReadTask, NULL, &UsartTaskHandle_attributes);
 8000330:	4a07      	ldr	r2, [pc, #28]	@ (8000350 <MX_FREERTOS_Init+0x34>)
 8000332:	2100      	movs	r1, #0
 8000334:	4807      	ldr	r0, [pc, #28]	@ (8000354 <MX_FREERTOS_Init+0x38>)
 8000336:	f001 ffbb 	bl	80022b0 <osThreadNew>
 800033a:	4603      	mov	r3, r0
 800033c:	4a06      	ldr	r2, [pc, #24]	@ (8000358 <MX_FREERTOS_Init+0x3c>)
 800033e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	08004e0c 	.word	0x08004e0c
 8000348:	0800035d 	.word	0x0800035d
 800034c:	2000013c 	.word	0x2000013c
 8000350:	08004de8 	.word	0x08004de8
 8000354:	08000455 	.word	0x08000455
 8000358:	20000034 	.word	0x20000034

0800035c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	if (work_flag) {
 8000364:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <StartDefaultTask+0x28>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d004      	beq.n	8000376 <StartDefaultTask+0x1a>
	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_9);
 800036c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000370:	4805      	ldr	r0, [pc, #20]	@ (8000388 <StartDefaultTask+0x2c>)
 8000372:	f7ff ffb9 	bl	80002e8 <LL_GPIO_TogglePin>
	}
	osDelay(led_blink_timedelay);
 8000376:	4b05      	ldr	r3, [pc, #20]	@ (800038c <StartDefaultTask+0x30>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	f002 f82a 	bl	80023d4 <osDelay>
	if (work_flag) {
 8000380:	e7f0      	b.n	8000364 <StartDefaultTask+0x8>
 8000382:	bf00      	nop
 8000384:	20000000 	.word	0x20000000
 8000388:	48000400 	.word	0x48000400
 800038c:	20000004 	.word	0x20000004

08000390 <Usart_data_parse>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Usart_data_parse(uint8_t *data, uint16_t len)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	807b      	strh	r3, [r7, #2]
  char* data_str = (char*)data;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	60fb      	str	r3, [r7, #12]
  if(strcmp(data_str, "STOP") == 0){
 80003a0:	4928      	ldr	r1, [pc, #160]	@ (8000444 <Usart_data_parse+0xb4>)
 80003a2:	68f8      	ldr	r0, [r7, #12]
 80003a4:	f7ff ff24 	bl	80001f0 <strcmp>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d103      	bne.n	80003b6 <Usart_data_parse+0x26>
    work_flag = 0;
 80003ae:	4b26      	ldr	r3, [pc, #152]	@ (8000448 <Usart_data_parse+0xb8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
    return ;
 80003b4:	e043      	b.n	800043e <Usart_data_parse+0xae>
  }else if (strcmp(data_str, "START") == 0) {
 80003b6:	4925      	ldr	r1, [pc, #148]	@ (800044c <Usart_data_parse+0xbc>)
 80003b8:	68f8      	ldr	r0, [r7, #12]
 80003ba:	f7ff ff19 	bl	80001f0 <strcmp>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d103      	bne.n	80003cc <Usart_data_parse+0x3c>
    work_flag = 1;
 80003c4:	4b20      	ldr	r3, [pc, #128]	@ (8000448 <Usart_data_parse+0xb8>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
    return ;
 80003ca:	e038      	b.n	800043e <Usart_data_parse+0xae>
  }
  //========= Add Code at this area begin =========
  if(data_str[0] == 'D' && data_str[1] == ':') {
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b44      	cmp	r3, #68	@ 0x44
 80003d2:	d134      	bne.n	800043e <Usart_data_parse+0xae>
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3301      	adds	r3, #1
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b3a      	cmp	r3, #58	@ 0x3a
 80003dc:	d12f      	bne.n	800043e <Usart_data_parse+0xae>
    uint32_t delay_value = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
    for(int i = 2; i < len; i++) {
 80003e2:	2302      	movs	r3, #2
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	e01d      	b.n	8000424 <Usart_data_parse+0x94>
      if(data_str[i] < '0' || data_str[i] > '9') {
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	4413      	add	r3, r2
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80003f2:	d913      	bls.n	800041c <Usart_data_parse+0x8c>
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	4413      	add	r3, r2
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b39      	cmp	r3, #57	@ 0x39
 80003fe:	d80d      	bhi.n	800041c <Usart_data_parse+0x8c>
        continue; // Invalid character, continue
      }
      delay_value = delay_value * 10 + (data_str[i] - '0');
 8000400:	697a      	ldr	r2, [r7, #20]
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	4619      	mov	r1, r3
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4413      	add	r3, r2
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	440b      	add	r3, r1
 8000416:	3b30      	subs	r3, #48	@ 0x30
 8000418:	617b      	str	r3, [r7, #20]
 800041a:	e000      	b.n	800041e <Usart_data_parse+0x8e>
        continue; // Invalid character, continue
 800041c:	bf00      	nop
    for(int i = 2; i < len; i++) {
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	3301      	adds	r3, #1
 8000422:	613b      	str	r3, [r7, #16]
 8000424:	887b      	ldrh	r3, [r7, #2]
 8000426:	693a      	ldr	r2, [r7, #16]
 8000428:	429a      	cmp	r2, r3
 800042a:	dbdd      	blt.n	80003e8 <Usart_data_parse+0x58>
    }
    if(delay_value > 0){
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d005      	beq.n	800043e <Usart_data_parse+0xae>
      work_flag = 1;
 8000432:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <Usart_data_parse+0xb8>)
 8000434:	2201      	movs	r2, #1
 8000436:	701a      	strb	r2, [r3, #0]
      led_blink_timedelay = delay_value;
 8000438:	4a05      	ldr	r2, [pc, #20]	@ (8000450 <Usart_data_parse+0xc0>)
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	6013      	str	r3, [r2, #0]
    }
  }
  //========= Add Code at this area end =========
}
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	08004dc0 	.word	0x08004dc0
 8000448:	20000000 	.word	0x20000000
 800044c:	08004dc8 	.word	0x08004dc8
 8000450:	20000004 	.word	0x20000004

08000454 <UartReadTask>:

void UartReadTask(void *argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_9);
 800045c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000460:	4826      	ldr	r0, [pc, #152]	@ (80004fc <UartReadTask+0xa8>)
 8000462:	f7ff ff33 	bl	80002cc <LL_GPIO_SetOutputPin>
  while (1) {
	//========= Add Code at this area begin =========
    if(LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000466:	4826      	ldr	r0, [pc, #152]	@ (8000500 <UartReadTask+0xac>)
 8000468:	f7ff fedf 	bl	800022a <LL_USART_IsActiveFlag_RXNE>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d01c      	beq.n	80004ac <UartReadTask+0x58>
	//========= Add Code at this area end =========
      uint8_t receivedChar = LL_USART_ReceiveData8(USART1);
 8000472:	4823      	ldr	r0, [pc, #140]	@ (8000500 <UartReadTask+0xac>)
 8000474:	f7ff ff0c 	bl	8000290 <LL_USART_ReceiveData8>
 8000478:	4603      	mov	r3, r0
 800047a:	73fb      	strb	r3, [r7, #15]
      usart1_rx_buffer.buffer[usart1_rx_buffer.index++] = receivedChar;
 800047c:	4b21      	ldr	r3, [pc, #132]	@ (8000504 <UartReadTask+0xb0>)
 800047e:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	b2d1      	uxtb	r1, r2
 8000486:	4a1f      	ldr	r2, [pc, #124]	@ (8000504 <UartReadTask+0xb0>)
 8000488:	f882 1100 	strb.w	r1, [r2, #256]	@ 0x100
 800048c:	4619      	mov	r1, r3
 800048e:	4a1d      	ldr	r2, [pc, #116]	@ (8000504 <UartReadTask+0xb0>)
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	5453      	strb	r3, [r2, r1]
      while(!LL_USART_IsActiveFlag_TXE(USART1));
 8000494:	bf00      	nop
 8000496:	481a      	ldr	r0, [pc, #104]	@ (8000500 <UartReadTask+0xac>)
 8000498:	f7ff feda 	bl	8000250 <LL_USART_IsActiveFlag_TXE>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f9      	beq.n	8000496 <UartReadTask+0x42>
      LL_USART_TransmitData8(USART1, receivedChar);
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	4619      	mov	r1, r3
 80004a6:	4816      	ldr	r0, [pc, #88]	@ (8000500 <UartReadTask+0xac>)
 80004a8:	f7ff ff00 	bl	80002ac <LL_USART_TransmitData8>
    }
    //========= Add Code at this area begin =========
    if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 80004ac:	4814      	ldr	r0, [pc, #80]	@ (8000500 <UartReadTask+0xac>)
 80004ae:	f7ff fea9 	bl	8000204 <LL_USART_IsActiveFlag_IDLE>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0d6      	beq.n	8000466 <UartReadTask+0x12>
	//========= Add Code at this area end =========
      LL_USART_ClearFlag_IDLE(USART1);
 80004b8:	4811      	ldr	r0, [pc, #68]	@ (8000500 <UartReadTask+0xac>)
 80004ba:	f7ff fedc 	bl	8000276 <LL_USART_ClearFlag_IDLE>
      usart1_rx_buffer.buffer[usart1_rx_buffer.index++] = '\0'; // Null-terminate the string
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <UartReadTask+0xb0>)
 80004c0:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80004c4:	1c5a      	adds	r2, r3, #1
 80004c6:	b2d1      	uxtb	r1, r2
 80004c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <UartReadTask+0xb0>)
 80004ca:	f882 1100 	strb.w	r1, [r2, #256]	@ 0x100
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <UartReadTask+0xb0>)
 80004d2:	2100      	movs	r1, #0
 80004d4:	5499      	strb	r1, [r3, r2]
      Usart_data_parse(usart1_rx_buffer.buffer, usart1_rx_buffer.index);
 80004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <UartReadTask+0xb0>)
 80004d8:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80004dc:	4619      	mov	r1, r3
 80004de:	4809      	ldr	r0, [pc, #36]	@ (8000504 <UartReadTask+0xb0>)
 80004e0:	f7ff ff56 	bl	8000390 <Usart_data_parse>
      memset(usart1_rx_buffer.buffer, 0, sizeof(usart1_rx_buffer.buffer));
 80004e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004e8:	2100      	movs	r1, #0
 80004ea:	4806      	ldr	r0, [pc, #24]	@ (8000504 <UartReadTask+0xb0>)
 80004ec:	f004 fc14 	bl	8004d18 <memset>
      usart1_rx_buffer.index = 0;
 80004f0:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <UartReadTask+0xb0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    if(LL_USART_IsActiveFlag_RXNE(USART1)) {
 80004f8:	e7b5      	b.n	8000466 <UartReadTask+0x12>
 80004fa:	bf00      	nop
 80004fc:	48000400 	.word	0x48000400
 8000500:	40013800 	.word	0x40013800
 8000504:	20000038 	.word	0x20000038

08000508 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000514:	4907      	ldr	r1, [pc, #28]	@ (8000534 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4313      	orrs	r3, r2
 800051a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800051c:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800051e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4013      	ands	r3, r2
 8000524:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000

08000538 <LL_GPIO_ResetOutputPin>:
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	463b      	mov	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
 8000568:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800056a:	2080      	movs	r0, #128	@ 0x80
 800056c:	f7ff ffcc 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff ffc9 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000576:	2002      	movs	r0, #2
 8000578:	f7ff ffc6 	bl	8000508 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_9);
 800057c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000580:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <MX_GPIO_Init+0x5c>)
 8000582:	f7ff ffd9 	bl	8000538 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800058a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800058c:	2301      	movs	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059c:	463b      	mov	r3, r7
 800059e:	4619      	mov	r1, r3
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <MX_GPIO_Init+0x5c>)
 80005a2:	f001 f8ce 	bl	8001742 <LL_GPIO_Init>

}
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	48000400 	.word	0x48000400

080005b4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <LL_RCC_HSE_Enable+0x1c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a04      	ldr	r2, [pc, #16]	@ (80005d0 <LL_RCC_HSE_Enable+0x1c>)
 80005be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <LL_RCC_HSE_IsReady+0x24>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80005e4:	d101      	bne.n	80005ea <LL_RCC_HSE_IsReady+0x16>
 80005e6:	2301      	movs	r3, #1
 80005e8:	e000      	b.n	80005ec <LL_RCC_HSE_IsReady+0x18>
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <LL_RCC_SetSysClkSource+0x24>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 0203 	bic.w	r2, r3, #3
 800060c:	4904      	ldr	r1, [pc, #16]	@ (8000620 <LL_RCC_SetSysClkSource+0x24>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	608b      	str	r3, [r1, #8]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000

08000624 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <LL_RCC_GetSysClkSource+0x18>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f003 030c 	and.w	r3, r3, #12
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <LL_RCC_SetAHBPrescaler+0x24>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000650:	4904      	ldr	r1, [pc, #16]	@ (8000664 <LL_RCC_SetAHBPrescaler+0x24>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4313      	orrs	r3, r2
 8000656:	608b      	str	r3, [r1, #8]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	40021000 	.word	0x40021000

08000668 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000678:	4904      	ldr	r1, [pc, #16]	@ (800068c <LL_RCC_SetAPB1Prescaler+0x24>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4313      	orrs	r3, r2
 800067e:	608b      	str	r3, [r1, #8]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000

08000690 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80006a0:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	608b      	str	r3, [r1, #8]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000

080006b8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <LL_RCC_PLL_Enable+0x1c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <LL_RCC_PLL_Enable+0x1c>)
 80006c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <LL_RCC_PLL_IsReady+0x24>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80006e8:	d101      	bne.n	80006ee <LL_RCC_PLL_IsReady+0x16>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <LL_RCC_PLL_IsReady+0x18>
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000710:	68da      	ldr	r2, [r3, #12]
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000714:	4013      	ands	r3, r2
 8000716:	68f9      	ldr	r1, [r7, #12]
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	4311      	orrs	r1, r2
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	0212      	lsls	r2, r2, #8
 8000720:	4311      	orrs	r1, r2
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	430a      	orrs	r2, r1
 8000726:	4904      	ldr	r1, [pc, #16]	@ (8000738 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000728:	4313      	orrs	r3, r2
 800072a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000
 800073c:	f9ff808c 	.word	0xf9ff808c

08000740 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800074a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <LL_FLASH_SetLatency+0x24>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f023 0207 	bic.w	r2, r3, #7
 8000770:	4904      	ldr	r1, [pc, #16]	@ (8000784 <LL_FLASH_SetLatency+0x24>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	600b      	str	r3, [r1, #0]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40022000 	.word	0x40022000

08000788 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <LL_FLASH_GetLatency+0x18>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f003 0307 	and.w	r3, r3, #7
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80007b4:	4904      	ldr	r1, [pc, #16]	@ (80007c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	600b      	str	r3, [r1, #0]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40007000 	.word	0x40007000

080007cc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007dc:	d101      	bne.n	80007e2 <LL_PWR_IsActiveFlag_VOS+0x16>
 80007de:	2301      	movs	r3, #1
 80007e0:	e000      	b.n	80007e4 <LL_PWR_IsActiveFlag_VOS+0x18>
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40007000 	.word	0x40007000

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fa2f 	bl	8000c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f80c 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f7ff fea8 	bl	8000554 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000804:	f000 f9ac 	bl	8000b60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000808:	f001 fd08 	bl	800221c <osKernelInitialize>
  MX_FREERTOS_Init();
 800080c:	f7ff fd86 	bl	800031c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000810:	f001 fd28 	bl	8002264 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <main+0x20>

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 800081c:	2004      	movs	r0, #4
 800081e:	f7ff ff9f 	bl	8000760 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000822:	bf00      	nop
 8000824:	f7ff ffb0 	bl	8000788 <LL_FLASH_GetLatency>
 8000828:	4603      	mov	r3, r0
 800082a:	2b04      	cmp	r3, #4
 800082c:	d1fa      	bne.n	8000824 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800082e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000832:	f7ff ffb7 	bl	80007a4 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000836:	bf00      	nop
 8000838:	f7ff ffc8 	bl	80007cc <LL_PWR_IsActiveFlag_VOS>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1fa      	bne.n	8000838 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSE_Enable();
 8000842:	f7ff feb7 	bl	80005b4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000846:	bf00      	nop
 8000848:	f7ff fec4 	bl	80005d4 <LL_RCC_HSE_IsReady>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d1fa      	bne.n	8000848 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 20, LL_RCC_PLLR_DIV_2);
 8000852:	2300      	movs	r3, #0
 8000854:	2214      	movs	r2, #20
 8000856:	2100      	movs	r1, #0
 8000858:	2003      	movs	r0, #3
 800085a:	f7ff ff51 	bl	8000700 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 800085e:	f7ff ff6f 	bl	8000740 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000862:	f7ff ff29 	bl	80006b8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000866:	bf00      	nop
 8000868:	f7ff ff36 	bl	80006d8 <LL_RCC_PLL_IsReady>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d1fa      	bne.n	8000868 <SystemClock_Config+0x50>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000872:	2003      	movs	r0, #3
 8000874:	f7ff fec2 	bl	80005fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000878:	bf00      	nop
 800087a:	f7ff fed3 	bl	8000624 <LL_RCC_GetSysClkSource>
 800087e:	4603      	mov	r3, r0
 8000880:	2b0c      	cmp	r3, #12
 8000882:	d1fa      	bne.n	800087a <SystemClock_Config+0x62>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fedb 	bl	8000640 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff feec 	bl	8000668 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff fefd 	bl	8000690 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <SystemClock_Config+0x98>)
 8000898:	f001 fc6c 	bl	8002174 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800089c:	200f      	movs	r0, #15
 800089e:	f000 f849 	bl	8000934 <HAL_InitTick>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a8:	f000 f816 	bl	80008d8 <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	04c4b400 	.word	0x04c4b400

080008b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008c6:	f000 f9e1 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_MspInit+0x4c>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <HAL_MspInit+0x4c>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	@ 0x58
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <HAL_MspInit+0x4c>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	210f      	movs	r1, #15
 800091e:	f06f 0001 	mvn.w	r0, #1
 8000922:	f000 fa7f 	bl	8000e24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	@ 0x30
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <HAL_InitTick+0xc8>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000946:	4a2d      	ldr	r2, [pc, #180]	@ (80009fc <HAL_InitTick+0xc8>)
 8000948:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800094c:	6613      	str	r3, [r2, #96]	@ 0x60
 800094e:	4b2b      	ldr	r3, [pc, #172]	@ (80009fc <HAL_InitTick+0xc8>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800095a:	f107 020c 	add.w	r2, r7, #12
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f000 faa9 	bl	8000ebc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800096a:	f000 fa91 	bl	8000e90 <HAL_RCC_GetPCLK2Freq>
 800096e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	4a23      	ldr	r2, [pc, #140]	@ (8000a00 <HAL_InitTick+0xcc>)
 8000974:	fba2 2303 	umull	r2, r3, r2, r3
 8000978:	0c9b      	lsrs	r3, r3, #18
 800097a:	3b01      	subs	r3, #1
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800097e:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <HAL_InitTick+0xd0>)
 8000980:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <HAL_InitTick+0xd4>)
 8000982:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <HAL_InitTick+0xd0>)
 8000986:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800098a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800098c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a04 <HAL_InitTick+0xd0>)
 800098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000990:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <HAL_InitTick+0xd0>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <HAL_InitTick+0xd0>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <HAL_InitTick+0xd0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009a4:	4817      	ldr	r0, [pc, #92]	@ (8000a04 <HAL_InitTick+0xd0>)
 80009a6:	f000 fabb 	bl	8000f20 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d11b      	bne.n	80009f0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009b8:	4812      	ldr	r0, [pc, #72]	@ (8000a04 <HAL_InitTick+0xd0>)
 80009ba:	f000 fb13 	bl	8000fe4 <HAL_TIM_Base_Start_IT>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d111      	bne.n	80009f0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009cc:	2019      	movs	r0, #25
 80009ce:	f000 fa45 	bl	8000e5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d808      	bhi.n	80009ea <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	2019      	movs	r0, #25
 80009de:	f000 fa21 	bl	8000e24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_InitTick+0xd8>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e002      	b.n	80009f0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3730      	adds	r7, #48	@ 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	431bde83 	.word	0x431bde83
 8000a04:	20000140 	.word	0x20000140
 8000a08:	40012c00 	.word	0x40012c00
 8000a0c:	2000000c 	.word	0x2000000c

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a4e:	f000 fb39 	bl	80010c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000140 	.word	0x20000140

08000a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <LL_RCC_SetUSARTClockSource>:
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <LL_RCC_SetUSARTClockSource+0x30>)
 8000a8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	0c1b      	lsrs	r3, r3, #16
 8000a92:	43db      	mvns	r3, r3
 8000a94:	401a      	ands	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4905      	ldr	r1, [pc, #20]	@ (8000ab0 <LL_RCC_SetUSARTClockSource+0x30>)
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <LL_AHB2_GRP1_EnableClock>:
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000abe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ac0:	4907      	ldr	r1, [pc, #28]	@ (8000ae0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000af0:	4907      	ldr	r1, [pc, #28]	@ (8000b10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000afa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4013      	ands	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40021000 	.word	0x40021000

08000b14 <LL_USART_Enable>:
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f043 0201 	orr.w	r2, r3, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <LL_USART_ConfigAsyncMode>:
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	609a      	str	r2, [r3, #8]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	@ 0x38
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8000b8a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000b8e:	f7ff ff77 	bl	8000a80 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000b92:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b96:	f7ff ffa5 	bl	8000ae4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff ff8a 	bl	8000ab4 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000ba0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc2:	f000 fdbe 	bl	8001742 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000bc6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000bca:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000be0:	2300      	movs	r3, #0
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <MX_USART1_UART_Init+0xa4>)
 8000bec:	f001 fa46 	bl	800207c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000bf0:	4804      	ldr	r0, [pc, #16]	@ (8000c04 <MX_USART1_UART_Init+0xa4>)
 8000bf2:	f7ff ff9f 	bl	8000b34 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000bf6:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <MX_USART1_UART_Init+0xa4>)
 8000bf8:	f7ff ff8c 	bl	8000b14 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	3738      	adds	r7, #56	@ 0x38
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40013800 	.word	0x40013800

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff ff26 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f004 f877 	bl	8004d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3a:	f7ff fddb 	bl	80007f4 <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000c4c:	08004e88 	.word	0x08004e88
  ldr r2, =_sbss
 8000c50:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000c54:	20001a98 	.word	0x20001a98

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>

08000c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8d2 	bl	8000e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fe62 	bl	8000934 <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e001      	b.n	8000c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7c:	f7ff fe32 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000010 	.word	0x20000010
 8000cb0:	2000018c 	.word	0x2000018c

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	@ (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e36:	f7ff ff61 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f7ff ffb1 	bl	8000da8 <NVIC_EncodePriority>
 8000e46:	4602      	mov	r2, r0
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff54 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008

08000e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000e94:	f7ff fff0 	bl	8000e78 <HAL_RCC_GetHCLKFreq>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	0adb      	lsrs	r3, r3, #11
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	4904      	ldr	r1, [pc, #16]	@ (8000eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000ea6:	5ccb      	ldrb	r3, [r1, r3]
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	08004e40 	.word	0x08004e40

08000ebc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	220f      	movs	r2, #15
 8000eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_RCC_GetClockConfig+0x5c>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <HAL_RCC_GetClockConfig+0x5c>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_RCC_GetClockConfig+0x5c>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_RCC_GetClockConfig+0x5c>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <HAL_RCC_GetClockConfig+0x60>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0207 	and.w	r2, r3, #7
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	601a      	str	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e049      	b.n	8000fc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d106      	bne.n	8000f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f841 	bl	8000fce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f000 f9e0 	bl	8001324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d001      	beq.n	8000ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e04f      	b.n	800109c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2202      	movs	r2, #2
 8001000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a23      	ldr	r2, [pc, #140]	@ (80010a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d01d      	beq.n	800105a <HAL_TIM_Base_Start_IT+0x76>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001026:	d018      	beq.n	800105a <HAL_TIM_Base_Start_IT+0x76>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1f      	ldr	r2, [pc, #124]	@ (80010ac <HAL_TIM_Base_Start_IT+0xc8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_TIM_Base_Start_IT+0x76>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d00e      	beq.n	800105a <HAL_TIM_Base_Start_IT+0x76>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d009      	beq.n	800105a <HAL_TIM_Base_Start_IT+0x76>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1b      	ldr	r2, [pc, #108]	@ (80010b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d004      	beq.n	800105a <HAL_TIM_Base_Start_IT+0x76>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a19      	ldr	r2, [pc, #100]	@ (80010bc <HAL_TIM_Base_Start_IT+0xd8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d115      	bne.n	8001086 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001062:	4013      	ands	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b06      	cmp	r3, #6
 800106a:	d015      	beq.n	8001098 <HAL_TIM_Base_Start_IT+0xb4>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001072:	d011      	beq.n	8001098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001084:	e008      	b.n	8001098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0201 	orr.w	r2, r2, #1
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e000      	b.n	800109a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40012c00 	.word	0x40012c00
 80010ac:	40000400 	.word	0x40000400
 80010b0:	40000800 	.word	0x40000800
 80010b4:	40000c00 	.word	0x40000c00
 80010b8:	40013400 	.word	0x40013400
 80010bc:	40014000 	.word	0x40014000
 80010c0:	00010007 	.word	0x00010007

080010c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d020      	beq.n	8001128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01b      	beq.n	8001128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f06f 0202 	mvn.w	r2, #2
 80010f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f8e9 	bl	80012e6 <HAL_TIM_IC_CaptureCallback>
 8001114:	e005      	b.n	8001122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f8db 	bl	80012d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f8ec 	bl	80012fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	d020      	beq.n	8001174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d01b      	beq.n	8001174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f06f 0204 	mvn.w	r2, #4
 8001144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2202      	movs	r2, #2
 800114a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f8c3 	bl	80012e6 <HAL_TIM_IC_CaptureCallback>
 8001160:	e005      	b.n	800116e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f8b5 	bl	80012d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f8c6 	bl	80012fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d020      	beq.n	80011c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01b      	beq.n	80011c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f06f 0208 	mvn.w	r2, #8
 8001190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2204      	movs	r2, #4
 8001196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f89d 	bl	80012e6 <HAL_TIM_IC_CaptureCallback>
 80011ac:	e005      	b.n	80011ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f88f 	bl	80012d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f8a0 	bl	80012fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d020      	beq.n	800120c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01b      	beq.n	800120c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f06f 0210 	mvn.w	r2, #16
 80011dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2208      	movs	r2, #8
 80011e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f877 	bl	80012e6 <HAL_TIM_IC_CaptureCallback>
 80011f8:	e005      	b.n	8001206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f869 	bl	80012d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f87a 	bl	80012fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00c      	beq.n	8001230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0201 	mvn.w	r2, #1
 8001228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fb42 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001236:	2b00      	cmp	r3, #0
 8001238:	d104      	bne.n	8001244 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00c      	beq.n	800125e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f913 	bl	8001484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00c      	beq.n	8001282 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800127a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f90b 	bl	8001498 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00c      	beq.n	80012a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d007      	beq.n	80012a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800129e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f834 	bl	800130e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00c      	beq.n	80012ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f06f 0220 	mvn.w	r2, #32
 80012c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f8d3 	bl	8001470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a46      	ldr	r2, [pc, #280]	@ (8001450 <TIM_Base_SetConfig+0x12c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d013      	beq.n	8001364 <TIM_Base_SetConfig+0x40>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001342:	d00f      	beq.n	8001364 <TIM_Base_SetConfig+0x40>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a43      	ldr	r2, [pc, #268]	@ (8001454 <TIM_Base_SetConfig+0x130>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00b      	beq.n	8001364 <TIM_Base_SetConfig+0x40>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a42      	ldr	r2, [pc, #264]	@ (8001458 <TIM_Base_SetConfig+0x134>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d007      	beq.n	8001364 <TIM_Base_SetConfig+0x40>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a41      	ldr	r2, [pc, #260]	@ (800145c <TIM_Base_SetConfig+0x138>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d003      	beq.n	8001364 <TIM_Base_SetConfig+0x40>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a40      	ldr	r2, [pc, #256]	@ (8001460 <TIM_Base_SetConfig+0x13c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d108      	bne.n	8001376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800136a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a35      	ldr	r2, [pc, #212]	@ (8001450 <TIM_Base_SetConfig+0x12c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01f      	beq.n	80013be <TIM_Base_SetConfig+0x9a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001384:	d01b      	beq.n	80013be <TIM_Base_SetConfig+0x9a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a32      	ldr	r2, [pc, #200]	@ (8001454 <TIM_Base_SetConfig+0x130>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d017      	beq.n	80013be <TIM_Base_SetConfig+0x9a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a31      	ldr	r2, [pc, #196]	@ (8001458 <TIM_Base_SetConfig+0x134>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <TIM_Base_SetConfig+0x9a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a30      	ldr	r2, [pc, #192]	@ (800145c <TIM_Base_SetConfig+0x138>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00f      	beq.n	80013be <TIM_Base_SetConfig+0x9a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001460 <TIM_Base_SetConfig+0x13c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00b      	beq.n	80013be <TIM_Base_SetConfig+0x9a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001464 <TIM_Base_SetConfig+0x140>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <TIM_Base_SetConfig+0x9a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001468 <TIM_Base_SetConfig+0x144>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d003      	beq.n	80013be <TIM_Base_SetConfig+0x9a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a2c      	ldr	r2, [pc, #176]	@ (800146c <TIM_Base_SetConfig+0x148>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d108      	bne.n	80013d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a16      	ldr	r2, [pc, #88]	@ (8001450 <TIM_Base_SetConfig+0x12c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00f      	beq.n	800141c <TIM_Base_SetConfig+0xf8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <TIM_Base_SetConfig+0x13c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d00b      	beq.n	800141c <TIM_Base_SetConfig+0xf8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a17      	ldr	r2, [pc, #92]	@ (8001464 <TIM_Base_SetConfig+0x140>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d007      	beq.n	800141c <TIM_Base_SetConfig+0xf8>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a16      	ldr	r2, [pc, #88]	@ (8001468 <TIM_Base_SetConfig+0x144>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d003      	beq.n	800141c <TIM_Base_SetConfig+0xf8>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a15      	ldr	r2, [pc, #84]	@ (800146c <TIM_Base_SetConfig+0x148>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d103      	bne.n	8001424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d105      	bne.n	8001442 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f023 0201 	bic.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	611a      	str	r2, [r3, #16]
  }
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40012c00 	.word	0x40012c00
 8001454:	40000400 	.word	0x40000400
 8001458:	40000800 	.word	0x40000800
 800145c:	40000c00 	.word	0x40000c00
 8001460:	40013400 	.word	0x40013400
 8001464:	40014000 	.word	0x40014000
 8001468:	40014400 	.word	0x40014400
 800146c:	40014800 	.word	0x40014800

08001470 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_GPIO_SetPinMode>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b08b      	sub	sp, #44	@ 0x2c
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa93 f3a3 	rbit	r3, r3
 80014c6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80014d2:	2320      	movs	r3, #32
 80014d4:	e003      	b.n	80014de <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	fab3 f383 	clz	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2103      	movs	r1, #3
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	401a      	ands	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	61fb      	str	r3, [r7, #28]
  return result;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001500:	2320      	movs	r3, #32
 8001502:	e003      	b.n	800150c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	431a      	orrs	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	@ 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_GPIO_SetPinOutputType>:
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	43db      	mvns	r3, r3
 800153a:	401a      	ands	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	fb01 f303 	mul.w	r3, r1, r3
 8001544:	431a      	orrs	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	605a      	str	r2, [r3, #4]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_GPIO_SetPinSpeed>:
{
 8001556:	b480      	push	{r7}
 8001558:	b08b      	sub	sp, #44	@ 0x2c
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	613b      	str	r3, [r7, #16]
  return result;
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800157c:	2320      	movs	r3, #32
 800157e:	e003      	b.n	8001588 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2103      	movs	r1, #3
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	fa93 f3a3 	rbit	r3, r3
 800159e:	61fb      	str	r3, [r7, #28]
  return result;
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80015aa:	2320      	movs	r3, #32
 80015ac:	e003      	b.n	80015b6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	431a      	orrs	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	609a      	str	r2, [r3, #8]
}
 80015c4:	bf00      	nop
 80015c6:	372c      	adds	r7, #44	@ 0x2c
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_GPIO_SetPinPull>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b08b      	sub	sp, #44	@ 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	613b      	str	r3, [r7, #16]
  return result;
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80015f6:	2320      	movs	r3, #32
 80015f8:	e003      	b.n	8001602 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2103      	movs	r1, #3
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	401a      	ands	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	61fb      	str	r3, [r7, #28]
  return result;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001624:	2320      	movs	r3, #32
 8001626:	e003      	b.n	8001630 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	431a      	orrs	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	60da      	str	r2, [r3, #12]
}
 800163e:	bf00      	nop
 8001640:	372c      	adds	r7, #44	@ 0x2c
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_GPIO_SetAFPin_0_7>:
{
 800164a:	b480      	push	{r7}
 800164c:	b08b      	sub	sp, #44	@ 0x2c
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	613b      	str	r3, [r7, #16]
  return result;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001670:	2320      	movs	r3, #32
 8001672:	e003      	b.n	800167c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	210f      	movs	r1, #15
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	61fb      	str	r3, [r7, #28]
  return result;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800169e:	2320      	movs	r3, #32
 80016a0:	e003      	b.n	80016aa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	431a      	orrs	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	621a      	str	r2, [r3, #32]
}
 80016b8:	bf00      	nop
 80016ba:	372c      	adds	r7, #44	@ 0x2c
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_GPIO_SetAFPin_8_15>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b08b      	sub	sp, #44	@ 0x2c
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	613b      	str	r3, [r7, #16]
  return result;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80016ec:	2320      	movs	r3, #32
 80016ee:	e003      	b.n	80016f8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	210f      	movs	r1, #15
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	401a      	ands	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	61fb      	str	r3, [r7, #28]
  return result;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800171c:	2320      	movs	r3, #32
 800171e:	e003      	b.n	8001728 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	431a      	orrs	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001736:	bf00      	nop
 8001738:	372c      	adds	r7, #44	@ 0x2c
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b088      	sub	sp, #32
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	60fb      	str	r3, [r7, #12]
  return result;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <LL_GPIO_Init+0x26>
    return 32U;
 8001764:	2320      	movs	r3, #32
 8001766:	e003      	b.n	8001770 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001772:	e048      	b.n	8001806 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2101      	movs	r1, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03a      	beq.n	8001800 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <LL_GPIO_Init+0x58>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d10e      	bne.n	80017b8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	461a      	mov	r2, r3
 80017a0:	69b9      	ldr	r1, [r7, #24]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fed7 	bl	8001556 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	461a      	mov	r2, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff feb7 	bl	8001526 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	461a      	mov	r2, r3
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff05 	bl	80015d0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d111      	bne.n	80017f2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2bff      	cmp	r3, #255	@ 0xff
 80017d2:	d807      	bhi.n	80017e4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	461a      	mov	r2, r3
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff34 	bl	800164a <LL_GPIO_SetAFPin_0_7>
 80017e2:	e006      	b.n	80017f2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	461a      	mov	r2, r3
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff69 	bl	80016c4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	69b9      	ldr	r1, [r7, #24]
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fe56 	bl	80014ac <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1af      	bne.n	8001774 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <LL_RCC_HSI_IsReady>:
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <LL_RCC_HSI_IsReady+0x24>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001830:	d101      	bne.n	8001836 <LL_RCC_HSI_IsReady+0x16>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_RCC_HSI_IsReady+0x18>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000

08001848 <LL_RCC_LSE_IsReady>:
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <LL_RCC_LSE_IsReady+0x24>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b02      	cmp	r3, #2
 8001858:	d101      	bne.n	800185e <LL_RCC_LSE_IsReady+0x16>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_RCC_LSE_IsReady+0x18>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000

08001870 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b08      	cmp	r3, #8
 800187e:	d101      	bne.n	8001884 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000

08001894 <LL_RCC_MSI_GetRange>:
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <LL_RCC_MSI_GetRange+0x18>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80018b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000

080018cc <LL_RCC_GetSysClkSource>:
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <LL_RCC_GetSysClkSource+0x18>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <LL_RCC_GetAHBPrescaler>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80018ec:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <LL_RCC_GetAHBPrescaler+0x18>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000

08001904 <LL_RCC_GetAPB1Prescaler>:
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <LL_RCC_GetAPB1Prescaler+0x18>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000

08001920 <LL_RCC_GetAPB2Prescaler>:
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <LL_RCC_GetUSARTClockSource>:
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <LL_RCC_GetUSARTClockSource+0x24>)
 8001946:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	401a      	ands	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	4313      	orrs	r3, r2
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40021000 	.word	0x40021000

08001964 <LL_RCC_GetUARTClockSource>:
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <LL_RCC_GetUARTClockSource+0x24>)
 800196e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	4313      	orrs	r3, r2
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000

0800198c <LL_RCC_PLL_GetMainSource>:
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <LL_RCC_PLL_GetMainSource+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0303 	and.w	r3, r3, #3
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000

080019a8 <LL_RCC_PLL_GetN>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <LL_RCC_PLL_GetN+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000

080019c4 <LL_RCC_PLL_GetR>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80019c8:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <LL_RCC_PLL_GetR+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000

080019e0 <LL_RCC_PLL_GetDivider>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <LL_RCC_PLL_GetDivider+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d137      	bne.n	8001a7e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff94 	bl	800193c <LL_RCC_GetUSARTClockSource>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	f200 80b3 	bhi.w	8001b86 <LL_RCC_GetUSARTClockFreq+0x18a>
 8001a20:	a201      	add	r2, pc, #4	@ (adr r2, 8001a28 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8001a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a26:	bf00      	nop
 8001a28:	08001a67 	.word	0x08001a67
 8001a2c:	08001a39 	.word	0x08001a39
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001a53 	.word	0x08001a53
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001a38:	f000 f956 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001a3c:	60f8      	str	r0, [r7, #12]
        break;
 8001a3e:	e0b3      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001a40:	f7ff feee 	bl	8001820 <LL_RCC_HSI_IsReady>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 809f 	beq.w	8001b8a <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8001a4c:	4b59      	ldr	r3, [pc, #356]	@ (8001bb4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001a4e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001a50:	e09b      	b.n	8001b8a <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001a52:	f7ff fef9 	bl	8001848 <LL_RCC_LSE_IsReady>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8098 	beq.w	8001b8e <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8001a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a62:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001a64:	e093      	b.n	8001b8e <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001a66:	f000 f93f 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f9cb 	bl	8001e08 <RCC_GetHCLKClockFreq>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f9f1 	bl	8001e5c <RCC_GetPCLK2ClockFreq>
 8001a7a:	60f8      	str	r0, [r7, #12]
        break;
 8001a7c:	e094      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0c      	cmp	r3, #12
 8001a82:	d146      	bne.n	8001b12 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff59 	bl	800193c <LL_RCC_GetUSARTClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	d87e      	bhi.n	8001b92 <LL_RCC_GetUSARTClockFreq+0x196>
 8001a94:	a201      	add	r2, pc, #4	@ (adr r2, 8001a9c <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9a:	bf00      	nop
 8001a9c:	08001afb 	.word	0x08001afb
 8001aa0:	08001b93 	.word	0x08001b93
 8001aa4:	08001b93 	.word	0x08001b93
 8001aa8:	08001b93 	.word	0x08001b93
 8001aac:	08001ad1 	.word	0x08001ad1
 8001ab0:	08001b93 	.word	0x08001b93
 8001ab4:	08001b93 	.word	0x08001b93
 8001ab8:	08001b93 	.word	0x08001b93
 8001abc:	08001ad9 	.word	0x08001ad9
 8001ac0:	08001b93 	.word	0x08001b93
 8001ac4:	08001b93 	.word	0x08001b93
 8001ac8:	08001b93 	.word	0x08001b93
 8001acc:	08001ae9 	.word	0x08001ae9
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ad0:	f000 f90a 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001ad4:	60f8      	str	r0, [r7, #12]
        break;
 8001ad6:	e067      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001ad8:	f7ff fea2 	bl	8001820 <LL_RCC_HSI_IsReady>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d059      	beq.n	8001b96 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8001ae2:	4b34      	ldr	r3, [pc, #208]	@ (8001bb4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001ae4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ae6:	e056      	b.n	8001b96 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001ae8:	f7ff feae 	bl	8001848 <LL_RCC_LSE_IsReady>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d053      	beq.n	8001b9a <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8001af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001af6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001af8:	e04f      	b.n	8001b9a <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001afa:	f000 f8f5 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f981 	bl	8001e08 <RCC_GetHCLKClockFreq>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f993 	bl	8001e34 <RCC_GetPCLK1ClockFreq>
 8001b0e:	60f8      	str	r0, [r7, #12]
        break;
 8001b10:	e04a      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b30      	cmp	r3, #48	@ 0x30
 8001b16:	d147      	bne.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff0f 	bl	800193c <LL_RCC_GetUSARTClockSource>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8001b24:	d01a      	beq.n	8001b5c <LL_RCC_GetUSARTClockFreq+0x160>
 8001b26:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8001b2a:	d838      	bhi.n	8001b9e <LL_RCC_GetUSARTClockFreq+0x1a2>
 8001b2c:	4a22      	ldr	r2, [pc, #136]	@ (8001bb8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00c      	beq.n	8001b4c <LL_RCC_GetUSARTClockFreq+0x150>
 8001b32:	4a21      	ldr	r2, [pc, #132]	@ (8001bb8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d832      	bhi.n	8001b9e <LL_RCC_GetUSARTClockFreq+0x1a2>
 8001b38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001b3c:	d017      	beq.n	8001b6e <LL_RCC_GetUSARTClockFreq+0x172>
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bbc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d12c      	bne.n	8001b9e <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8001b44:	f000 f8d0 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001b48:	60f8      	str	r0, [r7, #12]
          break;
 8001b4a:	e02d      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8001b4c:	f7ff fe68 	bl	8001820 <LL_RCC_HSI_IsReady>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d025      	beq.n	8001ba2 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8001b56:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001b58:	60fb      	str	r3, [r7, #12]
          }
          break;
 8001b5a:	e022      	b.n	8001ba2 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8001b5c:	f7ff fe74 	bl	8001848 <LL_RCC_LSE_IsReady>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d01f      	beq.n	8001ba6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8001b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b6a:	60fb      	str	r3, [r7, #12]
          }
          break;
 8001b6c:	e01b      	b.n	8001ba6 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001b6e:	f000 f8bb 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f947 	bl	8001e08 <RCC_GetHCLKClockFreq>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f959 	bl	8001e34 <RCC_GetPCLK1ClockFreq>
 8001b82:	60f8      	str	r0, [r7, #12]
          break;
 8001b84:	e010      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b86:	bf00      	nop
 8001b88:	e00e      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b8a:	bf00      	nop
 8001b8c:	e00c      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b8e:	bf00      	nop
 8001b90:	e00a      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b92:	bf00      	nop
 8001b94:	e008      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b96:	bf00      	nop
 8001b98:	e006      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001b9a:	bf00      	nop
 8001b9c:	e004      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8001b9e:	bf00      	nop
 8001ba0:	e002      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001ba2:	bf00      	nop
 8001ba4:	e000      	b.n	8001ba8 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001ba6:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	00300020 	.word	0x00300020
 8001bbc:	00300010 	.word	0x00300010

08001bc0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bd0:	d13b      	bne.n	8001c4a <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fec6 	bl	8001964 <LL_RCC_GetUARTClockSource>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8001bde:	d01a      	beq.n	8001c16 <LL_RCC_GetUARTClockFreq+0x56>
 8001be0:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8001be4:	d82c      	bhi.n	8001c40 <LL_RCC_GetUARTClockFreq+0x80>
 8001be6:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd4 <LL_RCC_GetUARTClockFreq+0x114>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00c      	beq.n	8001c06 <LL_RCC_GetUARTClockFreq+0x46>
 8001bec:	4a39      	ldr	r2, [pc, #228]	@ (8001cd4 <LL_RCC_GetUARTClockFreq+0x114>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d826      	bhi.n	8001c40 <LL_RCC_GetUARTClockFreq+0x80>
 8001bf2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001bf6:	d017      	beq.n	8001c28 <LL_RCC_GetUARTClockFreq+0x68>
 8001bf8:	4a37      	ldr	r2, [pc, #220]	@ (8001cd8 <LL_RCC_GetUARTClockFreq+0x118>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d120      	bne.n	8001c40 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001bfe:	f000 f873 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001c02:	60f8      	str	r0, [r7, #12]
        break;
 8001c04:	e021      	b.n	8001c4a <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001c06:	f7ff fe0b 	bl	8001820 <LL_RCC_HSI_IsReady>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d019      	beq.n	8001c44 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 8001c10:	4b32      	ldr	r3, [pc, #200]	@ (8001cdc <LL_RCC_GetUARTClockFreq+0x11c>)
 8001c12:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c14:	e016      	b.n	8001c44 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001c16:	f7ff fe17 	bl	8001848 <LL_RCC_LSE_IsReady>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 8001c20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c24:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c26:	e00f      	b.n	8001c48 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001c28:	f000 f85e 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f8ea 	bl	8001e08 <RCC_GetHCLKClockFreq>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f8fc 	bl	8001e34 <RCC_GetPCLK1ClockFreq>
 8001c3c:	60f8      	str	r0, [r7, #12]
        break;
 8001c3e:	e004      	b.n	8001c4a <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 8001c40:	bf00      	nop
 8001c42:	e002      	b.n	8001c4a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001c44:	bf00      	nop
 8001c46:	e000      	b.n	8001c4a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001c48:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c50:	d13b      	bne.n	8001cca <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fe86 	bl	8001964 <LL_RCC_GetUARTClockSource>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001c5e:	d01a      	beq.n	8001c96 <LL_RCC_GetUARTClockFreq+0xd6>
 8001c60:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001c64:	d82c      	bhi.n	8001cc0 <LL_RCC_GetUARTClockFreq+0x100>
 8001c66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce0 <LL_RCC_GetUARTClockFreq+0x120>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00c      	beq.n	8001c86 <LL_RCC_GetUARTClockFreq+0xc6>
 8001c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce0 <LL_RCC_GetUARTClockFreq+0x120>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d826      	bhi.n	8001cc0 <LL_RCC_GetUARTClockFreq+0x100>
 8001c72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001c76:	d017      	beq.n	8001ca8 <LL_RCC_GetUARTClockFreq+0xe8>
 8001c78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce4 <LL_RCC_GetUARTClockFreq+0x124>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d120      	bne.n	8001cc0 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001c7e:	f000 f833 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001c82:	60f8      	str	r0, [r7, #12]
        break;
 8001c84:	e021      	b.n	8001cca <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001c86:	f7ff fdcb 	bl	8001820 <LL_RCC_HSI_IsReady>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d019      	beq.n	8001cc4 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <LL_RCC_GetUARTClockFreq+0x11c>)
 8001c92:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c94:	e016      	b.n	8001cc4 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001c96:	f7ff fdd7 	bl	8001848 <LL_RCC_LSE_IsReady>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8001ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ca4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ca6:	e00f      	b.n	8001cc8 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001ca8:	f000 f81e 	bl	8001ce8 <RCC_GetSystemClockFreq>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f8aa 	bl	8001e08 <RCC_GetHCLKClockFreq>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f8bc 	bl	8001e34 <RCC_GetPCLK1ClockFreq>
 8001cbc:	60f8      	str	r0, [r7, #12]
        break;
 8001cbe:	e004      	b.n	8001cca <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8001cc0:	bf00      	nop
 8001cc2:	e002      	b.n	8001cca <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8001cc4:	bf00      	nop
 8001cc6:	e000      	b.n	8001cca <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8001cc8:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	00c00080 	.word	0x00c00080
 8001cd8:	00c00040 	.word	0x00c00040
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	03000200 	.word	0x03000200
 8001ce4:	03000100 	.word	0x03000100

08001ce8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001cee:	f7ff fded 	bl	80018cc <LL_RCC_GetSysClkSource>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b0c      	cmp	r3, #12
 8001cf6:	d851      	bhi.n	8001d9c <RCC_GetSystemClockFreq+0xb4>
 8001cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001d00 <RCC_GetSystemClockFreq+0x18>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d35 	.word	0x08001d35
 8001d04:	08001d9d 	.word	0x08001d9d
 8001d08:	08001d9d 	.word	0x08001d9d
 8001d0c:	08001d9d 	.word	0x08001d9d
 8001d10:	08001d89 	.word	0x08001d89
 8001d14:	08001d9d 	.word	0x08001d9d
 8001d18:	08001d9d 	.word	0x08001d9d
 8001d1c:	08001d9d 	.word	0x08001d9d
 8001d20:	08001d8f 	.word	0x08001d8f
 8001d24:	08001d9d 	.word	0x08001d9d
 8001d28:	08001d9d 	.word	0x08001d9d
 8001d2c:	08001d9d 	.word	0x08001d9d
 8001d30:	08001d95 	.word	0x08001d95
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001d34:	f7ff fd9c 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d111      	bne.n	8001d62 <RCC_GetSystemClockFreq+0x7a>
 8001d3e:	f7ff fd97 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <RCC_GetSystemClockFreq+0x6a>
 8001d48:	f7ff fda4 	bl	8001894 <LL_RCC_MSI_GetRange>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	e003      	b.n	8001d5a <RCC_GetSystemClockFreq+0x72>
 8001d52:	f7ff fdad 	bl	80018b0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d56:	4603      	mov	r3, r0
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	4a28      	ldr	r2, [pc, #160]	@ (8001dfc <RCC_GetSystemClockFreq+0x114>)
 8001d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d60:	e010      	b.n	8001d84 <RCC_GetSystemClockFreq+0x9c>
 8001d62:	f7ff fd85 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <RCC_GetSystemClockFreq+0x8e>
 8001d6c:	f7ff fd92 	bl	8001894 <LL_RCC_MSI_GetRange>
 8001d70:	4603      	mov	r3, r0
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	e003      	b.n	8001d7e <RCC_GetSystemClockFreq+0x96>
 8001d76:	f7ff fd9b 	bl	80018b0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dfc <RCC_GetSystemClockFreq+0x114>)
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001d86:	e033      	b.n	8001df0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <RCC_GetSystemClockFreq+0x118>)
 8001d8a:	607b      	str	r3, [r7, #4]
      break;
 8001d8c:	e030      	b.n	8001df0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <RCC_GetSystemClockFreq+0x11c>)
 8001d90:	607b      	str	r3, [r7, #4]
      break;
 8001d92:	e02d      	b.n	8001df0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001d94:	f000 f876 	bl	8001e84 <RCC_PLL_GetFreqDomain_SYS>
 8001d98:	6078      	str	r0, [r7, #4]
      break;
 8001d9a:	e029      	b.n	8001df0 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001d9c:	f7ff fd68 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d111      	bne.n	8001dca <RCC_GetSystemClockFreq+0xe2>
 8001da6:	f7ff fd63 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <RCC_GetSystemClockFreq+0xd2>
 8001db0:	f7ff fd70 	bl	8001894 <LL_RCC_MSI_GetRange>
 8001db4:	4603      	mov	r3, r0
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	e003      	b.n	8001dc2 <RCC_GetSystemClockFreq+0xda>
 8001dba:	f7ff fd79 	bl	80018b0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001dfc <RCC_GetSystemClockFreq+0x114>)
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	e010      	b.n	8001dec <RCC_GetSystemClockFreq+0x104>
 8001dca:	f7ff fd51 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <RCC_GetSystemClockFreq+0xf6>
 8001dd4:	f7ff fd5e 	bl	8001894 <LL_RCC_MSI_GetRange>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	e003      	b.n	8001de6 <RCC_GetSystemClockFreq+0xfe>
 8001dde:	f7ff fd67 	bl	80018b0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001de2:	4603      	mov	r3, r0
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <RCC_GetSystemClockFreq+0x114>)
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001dee:	bf00      	nop
  }

  return frequency;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	08004e48 	.word	0x08004e48
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001e10:	f7ff fd6a 	bl	80018e8 <LL_RCC_GetAHBPrescaler>
 8001e14:	4603      	mov	r3, r0
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <RCC_GetHCLKClockFreq+0x28>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	40d3      	lsrs	r3, r2
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	08004e30 	.word	0x08004e30

08001e34 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001e3c:	f7ff fd62 	bl	8001904 <LL_RCC_GetAPB1Prescaler>
 8001e40:	4603      	mov	r3, r0
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <RCC_GetPCLK1ClockFreq+0x24>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	40d3      	lsrs	r3, r2
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	08004e40 	.word	0x08004e40

08001e5c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001e64:	f7ff fd5c 	bl	8001920 <LL_RCC_GetAPB2Prescaler>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	0adb      	lsrs	r3, r3, #11
 8001e6c:	4a04      	ldr	r2, [pc, #16]	@ (8001e80 <RCC_GetPCLK2ClockFreq+0x24>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	461a      	mov	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	40d3      	lsrs	r3, r2
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	08004e40 	.word	0x08004e40

08001e84 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001e8a:	f7ff fd7f 	bl	800198c <LL_RCC_PLL_GetMainSource>
 8001e8e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d036      	beq.n	8001f04 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d836      	bhi.n	8001f0a <RCC_PLL_GetFreqDomain_SYS+0x86>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d003      	beq.n	8001eaa <RCC_PLL_GetFreqDomain_SYS+0x26>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d02a      	beq.n	8001efe <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8001ea8:	e02f      	b.n	8001f0a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001eaa:	f7ff fce1 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d111      	bne.n	8001ed8 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8001eb4:	f7ff fcdc 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8001ebe:	f7ff fce9 	bl	8001894 <LL_RCC_MSI_GetRange>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	e003      	b.n	8001ed0 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8001ec8:	f7ff fcf2 	bl	80018b0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	4a2f      	ldr	r2, [pc, #188]	@ (8001f90 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	e010      	b.n	8001efa <RCC_PLL_GetFreqDomain_SYS+0x76>
 8001ed8:	f7ff fcca 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d004      	beq.n	8001eec <RCC_PLL_GetFreqDomain_SYS+0x68>
 8001ee2:	f7ff fcd7 	bl	8001894 <LL_RCC_MSI_GetRange>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	e003      	b.n	8001ef4 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8001eec:	f7ff fce0 	bl	80018b0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	4a26      	ldr	r2, [pc, #152]	@ (8001f90 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001efc:	e02f      	b.n	8001f5e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001efe:	4b25      	ldr	r3, [pc, #148]	@ (8001f94 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8001f00:	607b      	str	r3, [r7, #4]
      break;
 8001f02:	e02c      	b.n	8001f5e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8001f06:	607b      	str	r3, [r7, #4]
      break;
 8001f08:	e029      	b.n	8001f5e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001f0a:	f7ff fcb1 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8001f14:	f7ff fcac 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8001f1e:	f7ff fcb9 	bl	8001894 <LL_RCC_MSI_GetRange>
 8001f22:	4603      	mov	r3, r0
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	e003      	b.n	8001f30 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8001f28:	f7ff fcc2 	bl	80018b0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	4a17      	ldr	r2, [pc, #92]	@ (8001f90 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	e010      	b.n	8001f5a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8001f38:	f7ff fc9a 	bl	8001870 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d004      	beq.n	8001f4c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8001f42:	f7ff fca7 	bl	8001894 <LL_RCC_MSI_GetRange>
 8001f46:	4603      	mov	r3, r0
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	e003      	b.n	8001f54 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8001f4c:	f7ff fcb0 	bl	80018b0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f50:	4603      	mov	r3, r0
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	4a0e      	ldr	r2, [pc, #56]	@ (8001f90 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001f5c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001f5e:	f7ff fd3f 	bl	80019e0 <LL_RCC_PLL_GetDivider>
 8001f62:	4603      	mov	r3, r0
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	3301      	adds	r3, #1
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	fbb2 f4f3 	udiv	r4, r2, r3
 8001f6e:	f7ff fd1b 	bl	80019a8 <LL_RCC_PLL_GetN>
 8001f72:	4603      	mov	r3, r0
 8001f74:	fb03 f404 	mul.w	r4, r3, r4
 8001f78:	f7ff fd24 	bl	80019c4 <LL_RCC_PLL_GetR>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	0e5b      	lsrs	r3, r3, #25
 8001f80:	3301      	adds	r3, #1
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	08004e48 	.word	0x08004e48
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	007a1200 	.word	0x007a1200

08001f9c <LL_USART_IsEnabled>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <LL_USART_IsEnabled+0x18>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <LL_USART_IsEnabled+0x1a>
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_USART_SetStopBitsLength>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	605a      	str	r2, [r3, #4]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_USART_SetHWFlowCtrl>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_USART_SetBaudRate>:
{
 800200e:	b480      	push	{r7}
 8002010:	b087      	sub	sp, #28
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002022:	d11a      	bne.n	800205a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	005a      	lsls	r2, r3, #1
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	441a      	add	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	b29b      	uxth	r3, r3
 8002036:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	b29b      	uxth	r3, r3
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	60da      	str	r2, [r3, #12]
}
 8002058:	e00a      	b.n	8002070 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	085a      	lsrs	r2, r3, #1
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	441a      	add	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	60da      	str	r2, [r3, #12]
}
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ff84 	bl	8001f9c <LL_USART_IsEnabled>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d15b      	bne.n	8002152 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b2f      	ldr	r3, [pc, #188]	@ (800215c <LL_USART_Init+0xe0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	6851      	ldr	r1, [r2, #4]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	68d2      	ldr	r2, [r2, #12]
 80020aa:	4311      	orrs	r1, r2
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	6912      	ldr	r2, [r2, #16]
 80020b0:	4311      	orrs	r1, r2
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	6992      	ldr	r2, [r2, #24]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4619      	mov	r1, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff7c 	bl	8001fc2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff89 	bl	8001fe8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a21      	ldr	r2, [pc, #132]	@ (8002160 <LL_USART_Init+0xe4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d104      	bne.n	80020e8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80020de:	2003      	movs	r0, #3
 80020e0:	f7ff fc8c 	bl	80019fc <LL_RCC_GetUSARTClockFreq>
 80020e4:	60b8      	str	r0, [r7, #8]
 80020e6:	e023      	b.n	8002130 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002164 <LL_USART_Init+0xe8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d104      	bne.n	80020fa <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80020f0:	200c      	movs	r0, #12
 80020f2:	f7ff fc83 	bl	80019fc <LL_RCC_GetUSARTClockFreq>
 80020f6:	60b8      	str	r0, [r7, #8]
 80020f8:	e01a      	b.n	8002130 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002168 <LL_USART_Init+0xec>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d104      	bne.n	800210c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002102:	2030      	movs	r0, #48	@ 0x30
 8002104:	f7ff fc7a 	bl	80019fc <LL_RCC_GetUSARTClockFreq>
 8002108:	60b8      	str	r0, [r7, #8]
 800210a:	e011      	b.n	8002130 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a17      	ldr	r2, [pc, #92]	@ (800216c <LL_USART_Init+0xf0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d104      	bne.n	800211e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002114:	20c0      	movs	r0, #192	@ 0xc0
 8002116:	f7ff fd53 	bl	8001bc0 <LL_RCC_GetUARTClockFreq>
 800211a:	60b8      	str	r0, [r7, #8]
 800211c:	e008      	b.n	8002130 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a13      	ldr	r2, [pc, #76]	@ (8002170 <LL_USART_Init+0xf4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d104      	bne.n	8002130 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002126:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800212a:	f7ff fd49 	bl	8001bc0 <LL_RCC_GetUARTClockFreq>
 800212e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff5e 	bl	800200e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	efff69f3 	.word	0xefff69f3
 8002160:	40013800 	.word	0x40013800
 8002164:	40004400 	.word	0x40004400
 8002168:	40004800 	.word	0x40004800
 800216c:	40004c00 	.word	0x40004c00
 8002170:	40005000 	.word	0x40005000

08002174 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <LL_SetSystemCoreClock+0x1c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000008 	.word	0x20000008

08002194 <__NVIC_SetPriority>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <SysTick_Handler+0x1c>)
 80021ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80021f0:	f001 fd18 	bl	8003c24 <xTaskGetSchedulerState>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80021fa:	f002 fb0d 	bl	8004818 <xPortSysTickHandler>
  }
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800220c:	2100      	movs	r1, #0
 800220e:	f06f 0004 	mvn.w	r0, #4
 8002212:	f7ff ffbf 	bl	8002194 <__NVIC_SetPriority>
#endif
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002222:	f3ef 8305 	mrs	r3, IPSR
 8002226:	603b      	str	r3, [r7, #0]
  return(result);
 8002228:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800222e:	f06f 0305 	mvn.w	r3, #5
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	e00c      	b.n	8002250 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <osKernelInitialize+0x44>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <osKernelInitialize+0x44>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	e002      	b.n	8002250 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000190 	.word	0x20000190

08002264 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226a:	f3ef 8305 	mrs	r3, IPSR
 800226e:	603b      	str	r3, [r7, #0]
  return(result);
 8002270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002276:	f06f 0305 	mvn.w	r3, #5
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	e010      	b.n	80022a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800227e:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <osKernelStart+0x48>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d109      	bne.n	800229a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002286:	f7ff ffbf 	bl	8002208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <osKernelStart+0x48>)
 800228c:	2202      	movs	r2, #2
 800228e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002290:	f001 f87a 	bl	8003388 <vTaskStartScheduler>
      stat = osOK;
 8002294:	2300      	movs	r3, #0
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	e002      	b.n	80022a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022a0:	687b      	ldr	r3, [r7, #4]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000190 	.word	0x20000190

080022b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08e      	sub	sp, #56	@ 0x38
 80022b4:	af04      	add	r7, sp, #16
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022c0:	f3ef 8305 	mrs	r3, IPSR
 80022c4:	617b      	str	r3, [r7, #20]
  return(result);
 80022c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d17e      	bne.n	80023ca <osThreadNew+0x11a>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d07b      	beq.n	80023ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80022d6:	2318      	movs	r3, #24
 80022d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d045      	beq.n	8002376 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <osThreadNew+0x48>
        name = attr->name;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <osThreadNew+0x6e>
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b38      	cmp	r3, #56	@ 0x38
 8002310:	d805      	bhi.n	800231e <osThreadNew+0x6e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <osThreadNew+0x72>
        return (NULL);
 800231e:	2300      	movs	r3, #0
 8002320:	e054      	b.n	80023cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00e      	beq.n	8002358 <osThreadNew+0xa8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b5b      	cmp	r3, #91	@ 0x5b
 8002340:	d90a      	bls.n	8002358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <osThreadNew+0xa8>
        mem = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	e010      	b.n	800237a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10c      	bne.n	800237a <osThreadNew+0xca>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d108      	bne.n	800237a <osThreadNew+0xca>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d104      	bne.n	800237a <osThreadNew+0xca>
          mem = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	e001      	b.n	800237a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d110      	bne.n	80023a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002388:	9202      	str	r2, [sp, #8]
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6a3a      	ldr	r2, [r7, #32]
 8002394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fe1a 	bl	8002fd0 <xTaskCreateStatic>
 800239c:	4603      	mov	r3, r0
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e013      	b.n	80023ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d110      	bne.n	80023ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fe68 	bl	8003090 <xTaskCreate>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <osThreadNew+0x11a>
            hTask = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80023ca:	693b      	ldr	r3, [r7, #16]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3728      	adds	r7, #40	@ 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023dc:	f3ef 8305 	mrs	r3, IPSR
 80023e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80023e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <osDelay+0x1c>
    stat = osErrorISR;
 80023e8:	f06f 0305 	mvn.w	r3, #5
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e007      	b.n	8002400 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <osDelay+0x2c>
      vTaskDelay(ticks);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 ff8e 	bl	800331c <vTaskDelay>
    }
  }

  return (stat);
 8002400:	68fb      	ldr	r3, [r7, #12]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a07      	ldr	r2, [pc, #28]	@ (8002438 <vApplicationGetIdleTaskMemory+0x2c>)
 800241c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	4a06      	ldr	r2, [pc, #24]	@ (800243c <vApplicationGetIdleTaskMemory+0x30>)
 8002422:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2280      	movs	r2, #128	@ 0x80
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000194 	.word	0x20000194
 800243c:	200001f0 	.word	0x200001f0

08002440 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4a07      	ldr	r2, [pc, #28]	@ (800246c <vApplicationGetTimerTaskMemory+0x2c>)
 8002450:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4a06      	ldr	r2, [pc, #24]	@ (8002470 <vApplicationGetTimerTaskMemory+0x30>)
 8002456:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800245e:	601a      	str	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	200003f0 	.word	0x200003f0
 8002470:	2000044c 	.word	0x2000044c

08002474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 0208 	add.w	r2, r3, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f103 0208 	add.w	r2, r3, #8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f103 0208 	add.w	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	601a      	str	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d103      	bne.n	8002536 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e00c      	b.n	8002550 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3308      	adds	r3, #8
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e002      	b.n	8002544 <vListInsert+0x2e>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	429a      	cmp	r2, r3
 800254e:	d2f6      	bcs.n	800253e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6892      	ldr	r2, [r2, #8]
 800259e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6852      	ldr	r2, [r2, #4]
 80025a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d103      	bne.n	80025bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002608:	f002 f876 	bl	80046f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	441a      	add	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002638:	3b01      	subs	r3, #1
 800263a:	68f9      	ldr	r1, [r7, #12]
 800263c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	441a      	add	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	22ff      	movs	r2, #255	@ 0xff
 800264c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	22ff      	movs	r2, #255	@ 0xff
 8002654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d114      	bne.n	8002688 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01a      	beq.n	800269c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3310      	adds	r3, #16
 800266a:	4618      	mov	r0, r3
 800266c:	f001 f91a 	bl	80038a4 <xTaskRemoveFromEventList>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <xQueueGenericReset+0xd0>)
 8002678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	e009      	b.n	800269c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3310      	adds	r3, #16
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fef1 	bl	8002474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3324      	adds	r3, #36	@ 0x24
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff feec 	bl	8002474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800269c:	f002 f85e 	bl	800475c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026a0:	2301      	movs	r3, #1
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	e000ed04 	.word	0xe000ed04

080026b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08e      	sub	sp, #56	@ 0x38
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10b      	bne.n	80026dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80026e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	e7fd      	b.n	80026f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <xQueueGenericCreateStatic+0x56>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <xQueueGenericCreateStatic+0x5a>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <xQueueGenericCreateStatic+0x5c>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	623b      	str	r3, [r7, #32]
}
 8002722:	bf00      	nop
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <xQueueGenericCreateStatic+0x84>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <xQueueGenericCreateStatic+0x88>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <xQueueGenericCreateStatic+0x8a>
 8002738:	2300      	movs	r3, #0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	61fb      	str	r3, [r7, #28]
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	e7fd      	b.n	8002752 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002756:	2350      	movs	r3, #80	@ 0x50
 8002758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b50      	cmp	r3, #80	@ 0x50
 800275e:	d00b      	beq.n	8002778 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	61bb      	str	r3, [r7, #24]
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002778:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800278c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f805 	bl	80027aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3730      	adds	r7, #48	@ 0x30
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e002      	b.n	80027cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027d8:	2101      	movs	r1, #1
 80027da:	69b8      	ldr	r0, [r7, #24]
 80027dc:	f7ff fefe 	bl	80025dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08e      	sub	sp, #56	@ 0x38
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027fe:	2300      	movs	r3, #0
 8002800:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <xQueueGenericSend+0x34>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <xQueueGenericSend+0x42>
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <xQueueGenericSend+0x46>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <xQueueGenericSend+0x48>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <xQueueGenericSend+0x64>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d103      	bne.n	8002862 <xQueueGenericSend+0x72>
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <xQueueGenericSend+0x76>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <xQueueGenericSend+0x78>
 8002866:	2300      	movs	r3, #0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <xQueueGenericSend+0x94>
	__asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	623b      	str	r3, [r7, #32]
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002884:	f001 f9ce 	bl	8003c24 <xTaskGetSchedulerState>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <xQueueGenericSend+0xa4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <xQueueGenericSend+0xa8>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <xQueueGenericSend+0xaa>
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10b      	bne.n	80028b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	61fb      	str	r3, [r7, #28]
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	e7fd      	b.n	80028b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028b6:	f001 ff1f 	bl	80046f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <xQueueGenericSend+0xdc>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d129      	bne.n	8002920 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028d2:	f000 fa0f 	bl	8002cf4 <prvCopyDataToQueue>
 80028d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d010      	beq.n	8002902 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	3324      	adds	r3, #36	@ 0x24
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 ffdd 	bl	80038a4 <xTaskRemoveFromEventList>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028f0:	4b3f      	ldr	r3, [pc, #252]	@ (80029f0 <xQueueGenericSend+0x200>)
 80028f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	e00a      	b.n	8002918 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002908:	4b39      	ldr	r3, [pc, #228]	@ (80029f0 <xQueueGenericSend+0x200>)
 800290a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002918:	f001 ff20 	bl	800475c <vPortExitCritical>
				return pdPASS;
 800291c:	2301      	movs	r3, #1
 800291e:	e063      	b.n	80029e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002926:	f001 ff19 	bl	800475c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800292a:	2300      	movs	r3, #0
 800292c:	e05c      	b.n	80029e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800292e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4618      	mov	r0, r3
 800293a:	f001 f817 	bl	800396c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800293e:	2301      	movs	r3, #1
 8002940:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002942:	f001 ff0b 	bl	800475c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002946:	f000 fd87 	bl	8003458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800294a:	f001 fed5 	bl	80046f8 <vPortEnterCritical>
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002954:	b25b      	sxtb	r3, r3
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d103      	bne.n	8002964 <xQueueGenericSend+0x174>
 800295c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002966:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800296a:	b25b      	sxtb	r3, r3
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d103      	bne.n	800297a <xQueueGenericSend+0x18a>
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800297a:	f001 feef 	bl	800475c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800297e:	1d3a      	adds	r2, r7, #4
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f001 f806 	bl	8003998 <xTaskCheckForTimeOut>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d124      	bne.n	80029dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002994:	f000 faa6 	bl	8002ee4 <prvIsQueueFull>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d018      	beq.n	80029d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	3310      	adds	r3, #16
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 ff2a 	bl	8003800 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029ae:	f000 fa31 	bl	8002e14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029b2:	f000 fd5f 	bl	8003474 <xTaskResumeAll>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f47f af7c 	bne.w	80028b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80029be:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <xQueueGenericSend+0x200>)
 80029c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	e772      	b.n	80028b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029d2:	f000 fa1f 	bl	8002e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029d6:	f000 fd4d 	bl	8003474 <xTaskResumeAll>
 80029da:	e76c      	b.n	80028b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029de:	f000 fa19 	bl	8002e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029e2:	f000 fd47 	bl	8003474 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3738      	adds	r7, #56	@ 0x38
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	e000ed04 	.word	0xe000ed04

080029f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b090      	sub	sp, #64	@ 0x40
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <xQueueGenericSendFromISR+0x3e>
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <xQueueGenericSendFromISR+0x42>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xQueueGenericSendFromISR+0x44>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d103      	bne.n	8002a62 <xQueueGenericSendFromISR+0x6e>
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <xQueueGenericSendFromISR+0x72>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <xQueueGenericSendFromISR+0x74>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	623b      	str	r3, [r7, #32]
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a84:	f001 ff18 	bl	80048b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a88:	f3ef 8211 	mrs	r2, BASEPRI
 8002a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	61fa      	str	r2, [r7, #28]
 8002a9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002aa2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <xQueueGenericSendFromISR+0xc2>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d12f      	bne.n	8002b16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002abc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002acc:	f000 f912 	bl	8002cf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ad0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d112      	bne.n	8002b00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae4:	3324      	adds	r3, #36	@ 0x24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fedc 	bl	80038a4 <xTaskRemoveFromEventList>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00b      	beq.n	8002b10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e007      	b.n	8002b10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b04:	3301      	adds	r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	b25a      	sxtb	r2, r3
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002b10:	2301      	movs	r3, #1
 8002b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b14:	e001      	b.n	8002b1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3740      	adds	r7, #64	@ 0x40
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08c      	sub	sp, #48	@ 0x30
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10b      	bne.n	8002b62 <xQueueReceive+0x32>
	__asm volatile
 8002b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	623b      	str	r3, [r7, #32]
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	e7fd      	b.n	8002b5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <xQueueReceive+0x40>
 8002b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <xQueueReceive+0x44>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <xQueueReceive+0x46>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <xQueueReceive+0x62>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	61fb      	str	r3, [r7, #28]
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	e7fd      	b.n	8002b8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b92:	f001 f847 	bl	8003c24 <xTaskGetSchedulerState>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <xQueueReceive+0x72>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <xQueueReceive+0x76>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueReceive+0x78>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <xQueueReceive+0x94>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	61bb      	str	r3, [r7, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bc4:	f001 fd98 	bl	80046f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01f      	beq.n	8002c14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bd8:	f000 f8f6 	bl	8002dc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	1e5a      	subs	r2, r3, #1
 8002be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00f      	beq.n	8002c0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bee:	3310      	adds	r3, #16
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fe57 	bl	80038a4 <xTaskRemoveFromEventList>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf0 <xQueueReceive+0x1c0>)
 8002bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c0c:	f001 fda6 	bl	800475c <vPortExitCritical>
				return pdPASS;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e069      	b.n	8002ce8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c1a:	f001 fd9f 	bl	800475c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e062      	b.n	8002ce8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fe9d 	bl	800396c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c36:	f001 fd91 	bl	800475c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c3a:	f000 fc0d 	bl	8003458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c3e:	f001 fd5b 	bl	80046f8 <vPortEnterCritical>
 8002c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d103      	bne.n	8002c58 <xQueueReceive+0x128>
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d103      	bne.n	8002c6e <xQueueReceive+0x13e>
 8002c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c6e:	f001 fd75 	bl	800475c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c72:	1d3a      	adds	r2, r7, #4
 8002c74:	f107 0310 	add.w	r3, r7, #16
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fe8c 	bl	8003998 <xTaskCheckForTimeOut>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d123      	bne.n	8002cce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c88:	f000 f916 	bl	8002eb8 <prvIsQueueEmpty>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d017      	beq.n	8002cc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c94:	3324      	adds	r3, #36	@ 0x24
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fdb0 	bl	8003800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ca2:	f000 f8b7 	bl	8002e14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ca6:	f000 fbe5 	bl	8003474 <xTaskResumeAll>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d189      	bne.n	8002bc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <xQueueReceive+0x1c0>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	e780      	b.n	8002bc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cc4:	f000 f8a6 	bl	8002e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cc8:	f000 fbd4 	bl	8003474 <xTaskResumeAll>
 8002ccc:	e77a      	b.n	8002bc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cd0:	f000 f8a0 	bl	8002e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cd4:	f000 fbce 	bl	8003474 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cda:	f000 f8ed 	bl	8002eb8 <prvIsQueueEmpty>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f43f af6f 	beq.w	8002bc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ce6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3730      	adds	r7, #48	@ 0x30
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10d      	bne.n	8002d2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d14d      	bne.n	8002db6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 ff9e 	bl	8003c60 <xTaskPriorityDisinherit>
 8002d24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	e043      	b.n	8002db6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d119      	bne.n	8002d68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6858      	ldr	r0, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	f002 f816 	bl	8004d70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	441a      	add	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d32b      	bcc.n	8002db6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	e026      	b.n	8002db6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68d8      	ldr	r0, [r3, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	461a      	mov	r2, r3
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	f001 fffc 	bl	8004d70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	425b      	negs	r3, r3
 8002d82:	441a      	add	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d207      	bcs.n	8002da4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	425b      	negs	r3, r3
 8002d9e:	441a      	add	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d105      	bne.n	8002db6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002dbe:	697b      	ldr	r3, [r7, #20]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d018      	beq.n	8002e0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	441a      	add	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d303      	bcc.n	8002dfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	461a      	mov	r2, r3
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	f001 ffb2 	bl	8004d70 <memcpy>
	}
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e1c:	f001 fc6c 	bl	80046f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e28:	e011      	b.n	8002e4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d012      	beq.n	8002e58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3324      	adds	r3, #36	@ 0x24
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fd34 	bl	80038a4 <xTaskRemoveFromEventList>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e42:	f000 fe0d 	bl	8003a60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	dce9      	bgt.n	8002e2a <prvUnlockQueue+0x16>
 8002e56:	e000      	b.n	8002e5a <prvUnlockQueue+0x46>
					break;
 8002e58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	22ff      	movs	r2, #255	@ 0xff
 8002e5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002e62:	f001 fc7b 	bl	800475c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e66:	f001 fc47 	bl	80046f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e72:	e011      	b.n	8002e98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3310      	adds	r3, #16
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fd0f 	bl	80038a4 <xTaskRemoveFromEventList>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e8c:	f000 fde8 	bl	8003a60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e90:	7bbb      	ldrb	r3, [r7, #14]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	dce9      	bgt.n	8002e74 <prvUnlockQueue+0x60>
 8002ea0:	e000      	b.n	8002ea4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ea2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	22ff      	movs	r2, #255	@ 0xff
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002eac:	f001 fc56 	bl	800475c <vPortExitCritical>
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ec0:	f001 fc1a 	bl	80046f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e001      	b.n	8002ed6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ed6:	f001 fc41 	bl	800475c <vPortExitCritical>

	return xReturn;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eec:	f001 fc04 	bl	80046f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d102      	bne.n	8002f02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e001      	b.n	8002f06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f06:	f001 fc29 	bl	800475c <vPortExitCritical>

	return xReturn;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e014      	b.n	8002f4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f24:	4a0f      	ldr	r2, [pc, #60]	@ (8002f64 <vQueueAddToRegistry+0x50>)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f30:	490c      	ldr	r1, [pc, #48]	@ (8002f64 <vQueueAddToRegistry+0x50>)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <vQueueAddToRegistry+0x50>)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f46:	e006      	b.n	8002f56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b07      	cmp	r3, #7
 8002f52:	d9e7      	bls.n	8002f24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	2000084c 	.word	0x2000084c

08002f68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f78:	f001 fbbe 	bl	80046f8 <vPortEnterCritical>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d103      	bne.n	8002f92 <vQueueWaitForMessageRestricted+0x2a>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d103      	bne.n	8002fa8 <vQueueWaitForMessageRestricted+0x40>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fa8:	f001 fbd8 	bl	800475c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3324      	adds	r3, #36	@ 0x24
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fc45 	bl	800384c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f7ff ff26 	bl	8002e14 <prvUnlockQueue>
	}
 8002fc8:	bf00      	nop
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08e      	sub	sp, #56	@ 0x38
 8002fd4:	af04      	add	r7, sp, #16
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <xTaskCreateStatic+0x2c>
	__asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	623b      	str	r3, [r7, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	61fb      	str	r3, [r7, #28]
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	e7fd      	b.n	8003016 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800301a:	235c      	movs	r3, #92	@ 0x5c
 800301c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b5c      	cmp	r3, #92	@ 0x5c
 8003022:	d00b      	beq.n	800303c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	61bb      	str	r3, [r7, #24]
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800303c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800303e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01e      	beq.n	8003082 <xTaskCreateStatic+0xb2>
 8003044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01b      	beq.n	8003082 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800304a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800305c:	2300      	movs	r3, #0
 800305e:	9303      	str	r3, [sp, #12]
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	9302      	str	r3, [sp, #8]
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f850 	bl	800311a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800307a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800307c:	f000 f8de 	bl	800323c <prvAddNewTaskToReadyList>
 8003080:	e001      	b.n	8003086 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003086:	697b      	ldr	r3, [r7, #20]
	}
 8003088:	4618      	mov	r0, r3
 800308a:	3728      	adds	r7, #40	@ 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	@ 0x30
 8003094:	af04      	add	r7, sp, #16
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fc49 	bl	800493c <pvPortMalloc>
 80030aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00e      	beq.n	80030d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030b2:	205c      	movs	r0, #92	@ 0x5c
 80030b4:	f001 fc42 	bl	800493c <pvPortMalloc>
 80030b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80030c6:	e005      	b.n	80030d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030c8:	6978      	ldr	r0, [r7, #20]
 80030ca:	f001 fd05 	bl	8004ad8 <vPortFree>
 80030ce:	e001      	b.n	80030d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d017      	beq.n	800310a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	2300      	movs	r3, #0
 80030e6:	9303      	str	r3, [sp, #12]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	9302      	str	r3, [sp, #8]
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f80e 	bl	800311a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030fe:	69f8      	ldr	r0, [r7, #28]
 8003100:	f000 f89c 	bl	800323c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	e002      	b.n	8003110 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003110:	69bb      	ldr	r3, [r7, #24]
	}
 8003112:	4618      	mov	r0, r3
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b088      	sub	sp, #32
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	461a      	mov	r2, r3
 8003132:	21a5      	movs	r1, #165	@ 0xa5
 8003134:	f001 fdf0 	bl	8004d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003142:	3b01      	subs	r3, #1
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f023 0307 	bic.w	r3, r3, #7
 8003150:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	617b      	str	r3, [r7, #20]
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01f      	beq.n	80031ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e012      	b.n	80031a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	4413      	add	r3, r2
 8003186:	7819      	ldrb	r1, [r3, #0]
 8003188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	3334      	adds	r3, #52	@ 0x34
 8003190:	460a      	mov	r2, r1
 8003192:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	4413      	add	r3, r2
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d006      	beq.n	80031ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3301      	adds	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b0f      	cmp	r3, #15
 80031aa:	d9e9      	bls.n	8003180 <prvInitialiseNewTask+0x66>
 80031ac:	e000      	b.n	80031b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80031ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031b8:	e003      	b.n	80031c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c4:	2b37      	cmp	r3, #55	@ 0x37
 80031c6:	d901      	bls.n	80031cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031c8:	2337      	movs	r3, #55	@ 0x37
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	2200      	movs	r2, #0
 80031dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e0:	3304      	adds	r3, #4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f966 	bl	80024b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ea:	3318      	adds	r3, #24
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f961 	bl	80024b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80031fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	2200      	movs	r2, #0
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800320e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	68f9      	ldr	r1, [r7, #12]
 800321a:	69b8      	ldr	r0, [r7, #24]
 800321c:	f001 f93e 	bl	800449c <pxPortInitialiseStack>
 8003220:	4602      	mov	r2, r0
 8003222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003224:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800322c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003232:	bf00      	nop
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003244:	f001 fa58 	bl	80046f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003248:	4b2d      	ldr	r3, [pc, #180]	@ (8003300 <prvAddNewTaskToReadyList+0xc4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	4a2c      	ldr	r2, [pc, #176]	@ (8003300 <prvAddNewTaskToReadyList+0xc4>)
 8003250:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003252:	4b2c      	ldr	r3, [pc, #176]	@ (8003304 <prvAddNewTaskToReadyList+0xc8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800325a:	4a2a      	ldr	r2, [pc, #168]	@ (8003304 <prvAddNewTaskToReadyList+0xc8>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003260:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <prvAddNewTaskToReadyList+0xc4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d110      	bne.n	800328a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003268:	f000 fc1e 	bl	8003aa8 <prvInitialiseTaskLists>
 800326c:	e00d      	b.n	800328a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800326e:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <prvAddNewTaskToReadyList+0xcc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003276:	4b23      	ldr	r3, [pc, #140]	@ (8003304 <prvAddNewTaskToReadyList+0xc8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	429a      	cmp	r2, r3
 8003282:	d802      	bhi.n	800328a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003284:	4a1f      	ldr	r2, [pc, #124]	@ (8003304 <prvAddNewTaskToReadyList+0xc8>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800328a:	4b20      	ldr	r3, [pc, #128]	@ (800330c <prvAddNewTaskToReadyList+0xd0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	4a1e      	ldr	r2, [pc, #120]	@ (800330c <prvAddNewTaskToReadyList+0xd0>)
 8003292:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003294:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <prvAddNewTaskToReadyList+0xd0>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <prvAddNewTaskToReadyList+0xd4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d903      	bls.n	80032b0 <prvAddNewTaskToReadyList+0x74>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	4a18      	ldr	r2, [pc, #96]	@ (8003310 <prvAddNewTaskToReadyList+0xd4>)
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4a15      	ldr	r2, [pc, #84]	@ (8003314 <prvAddNewTaskToReadyList+0xd8>)
 80032be:	441a      	add	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f7ff f901 	bl	80024ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032cc:	f001 fa46 	bl	800475c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <prvAddNewTaskToReadyList+0xcc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <prvAddNewTaskToReadyList+0xc8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d207      	bcs.n	80032f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <prvAddNewTaskToReadyList+0xdc>)
 80032e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000d60 	.word	0x20000d60
 8003304:	2000088c 	.word	0x2000088c
 8003308:	20000d6c 	.word	0x20000d6c
 800330c:	20000d7c 	.word	0x20000d7c
 8003310:	20000d68 	.word	0x20000d68
 8003314:	20000890 	.word	0x20000890
 8003318:	e000ed04 	.word	0xe000ed04

0800331c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800332e:	4b14      	ldr	r3, [pc, #80]	@ (8003380 <vTaskDelay+0x64>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <vTaskDelay+0x32>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	60bb      	str	r3, [r7, #8]
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	e7fd      	b.n	800334a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800334e:	f000 f883 	bl	8003458 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003352:	2100      	movs	r1, #0
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fcf3 	bl	8003d40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800335a:	f000 f88b 	bl	8003474 <xTaskResumeAll>
 800335e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003366:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <vTaskDelay+0x68>)
 8003368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000d88 	.word	0x20000d88
 8003384:	e000ed04 	.word	0xe000ed04

08003388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	@ 0x28
 800338c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003396:	463a      	mov	r2, r7
 8003398:	1d39      	adds	r1, r7, #4
 800339a:	f107 0308 	add.w	r3, r7, #8
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f834 	bl	800240c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033a4:	6839      	ldr	r1, [r7, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	9202      	str	r2, [sp, #8]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	2300      	movs	r3, #0
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2300      	movs	r3, #0
 80033b4:	460a      	mov	r2, r1
 80033b6:	4922      	ldr	r1, [pc, #136]	@ (8003440 <vTaskStartScheduler+0xb8>)
 80033b8:	4822      	ldr	r0, [pc, #136]	@ (8003444 <vTaskStartScheduler+0xbc>)
 80033ba:	f7ff fe09 	bl	8002fd0 <xTaskCreateStatic>
 80033be:	4603      	mov	r3, r0
 80033c0:	4a21      	ldr	r2, [pc, #132]	@ (8003448 <vTaskStartScheduler+0xc0>)
 80033c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033c4:	4b20      	ldr	r3, [pc, #128]	@ (8003448 <vTaskStartScheduler+0xc0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033cc:	2301      	movs	r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	e001      	b.n	80033d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80033dc:	f000 fd04 	bl	8003de8 <xTimerCreateTimerTask>
 80033e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d116      	bne.n	8003416 <vTaskStartScheduler+0x8e>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	613b      	str	r3, [r7, #16]
}
 80033fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033fc:	4b13      	ldr	r3, [pc, #76]	@ (800344c <vTaskStartScheduler+0xc4>)
 80033fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003402:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003404:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <vTaskStartScheduler+0xc8>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <vTaskStartScheduler+0xcc>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003410:	f001 f8ce 	bl	80045b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003414:	e00f      	b.n	8003436 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d10b      	bne.n	8003436 <vTaskStartScheduler+0xae>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	60fb      	str	r3, [r7, #12]
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	e7fd      	b.n	8003432 <vTaskStartScheduler+0xaa>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	08004dd0 	.word	0x08004dd0
 8003444:	08003a79 	.word	0x08003a79
 8003448:	20000d84 	.word	0x20000d84
 800344c:	20000d80 	.word	0x20000d80
 8003450:	20000d6c 	.word	0x20000d6c
 8003454:	20000d64 	.word	0x20000d64

08003458 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <vTaskSuspendAll+0x18>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	4a03      	ldr	r2, [pc, #12]	@ (8003470 <vTaskSuspendAll+0x18>)
 8003464:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	20000d88 	.word	0x20000d88

08003474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003482:	4b42      	ldr	r3, [pc, #264]	@ (800358c <xTaskResumeAll+0x118>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	603b      	str	r3, [r7, #0]
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	e7fd      	b.n	800349e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034a2:	f001 f929 	bl	80046f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034a6:	4b39      	ldr	r3, [pc, #228]	@ (800358c <xTaskResumeAll+0x118>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	4a37      	ldr	r2, [pc, #220]	@ (800358c <xTaskResumeAll+0x118>)
 80034ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b0:	4b36      	ldr	r3, [pc, #216]	@ (800358c <xTaskResumeAll+0x118>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d162      	bne.n	800357e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034b8:	4b35      	ldr	r3, [pc, #212]	@ (8003590 <xTaskResumeAll+0x11c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d05e      	beq.n	800357e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034c0:	e02f      	b.n	8003522 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c2:	4b34      	ldr	r3, [pc, #208]	@ (8003594 <xTaskResumeAll+0x120>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3318      	adds	r3, #24
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff f85a 	bl	8002588 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff f855 	bl	8002588 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003598 <xTaskResumeAll+0x124>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d903      	bls.n	80034f2 <xTaskResumeAll+0x7e>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003598 <xTaskResumeAll+0x124>)
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4a27      	ldr	r2, [pc, #156]	@ (800359c <xTaskResumeAll+0x128>)
 8003500:	441a      	add	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3304      	adds	r3, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f7fe ffe0 	bl	80024ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003512:	4b23      	ldr	r3, [pc, #140]	@ (80035a0 <xTaskResumeAll+0x12c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800351c:	4b21      	ldr	r3, [pc, #132]	@ (80035a4 <xTaskResumeAll+0x130>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003522:	4b1c      	ldr	r3, [pc, #112]	@ (8003594 <xTaskResumeAll+0x120>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1cb      	bne.n	80034c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003530:	f000 fb58 	bl	8003be4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003534:	4b1c      	ldr	r3, [pc, #112]	@ (80035a8 <xTaskResumeAll+0x134>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d010      	beq.n	8003562 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003540:	f000 f846 	bl	80035d0 <xTaskIncrementTick>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800354a:	4b16      	ldr	r3, [pc, #88]	@ (80035a4 <xTaskResumeAll+0x130>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f1      	bne.n	8003540 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800355c:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <xTaskResumeAll+0x134>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003562:	4b10      	ldr	r3, [pc, #64]	@ (80035a4 <xTaskResumeAll+0x130>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800356e:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <xTaskResumeAll+0x138>)
 8003570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800357e:	f001 f8ed 	bl	800475c <vPortExitCritical>

	return xAlreadyYielded;
 8003582:	68bb      	ldr	r3, [r7, #8]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000d88 	.word	0x20000d88
 8003590:	20000d60 	.word	0x20000d60
 8003594:	20000d20 	.word	0x20000d20
 8003598:	20000d68 	.word	0x20000d68
 800359c:	20000890 	.word	0x20000890
 80035a0:	2000088c 	.word	0x2000088c
 80035a4:	20000d74 	.word	0x20000d74
 80035a8:	20000d70 	.word	0x20000d70
 80035ac:	e000ed04 	.word	0xe000ed04

080035b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035b6:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <xTaskGetTickCount+0x1c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035bc:	687b      	ldr	r3, [r7, #4]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000d64 	.word	0x20000d64

080035d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035da:	4b4f      	ldr	r3, [pc, #316]	@ (8003718 <xTaskIncrementTick+0x148>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 8090 	bne.w	8003704 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035e4:	4b4d      	ldr	r3, [pc, #308]	@ (800371c <xTaskIncrementTick+0x14c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035ec:	4a4b      	ldr	r2, [pc, #300]	@ (800371c <xTaskIncrementTick+0x14c>)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d121      	bne.n	800363c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80035f8:	4b49      	ldr	r3, [pc, #292]	@ (8003720 <xTaskIncrementTick+0x150>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	603b      	str	r3, [r7, #0]
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <xTaskIncrementTick+0x46>
 800361a:	4b41      	ldr	r3, [pc, #260]	@ (8003720 <xTaskIncrementTick+0x150>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	4b40      	ldr	r3, [pc, #256]	@ (8003724 <xTaskIncrementTick+0x154>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3e      	ldr	r2, [pc, #248]	@ (8003720 <xTaskIncrementTick+0x150>)
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4a3e      	ldr	r2, [pc, #248]	@ (8003724 <xTaskIncrementTick+0x154>)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b3e      	ldr	r3, [pc, #248]	@ (8003728 <xTaskIncrementTick+0x158>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	4a3c      	ldr	r2, [pc, #240]	@ (8003728 <xTaskIncrementTick+0x158>)
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	f000 fad4 	bl	8003be4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800363c:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <xTaskIncrementTick+0x15c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	429a      	cmp	r2, r3
 8003644:	d349      	bcc.n	80036da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003646:	4b36      	ldr	r3, [pc, #216]	@ (8003720 <xTaskIncrementTick+0x150>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003650:	4b36      	ldr	r3, [pc, #216]	@ (800372c <xTaskIncrementTick+0x15c>)
 8003652:	f04f 32ff 	mov.w	r2, #4294967295
 8003656:	601a      	str	r2, [r3, #0]
					break;
 8003658:	e03f      	b.n	80036da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800365a:	4b31      	ldr	r3, [pc, #196]	@ (8003720 <xTaskIncrementTick+0x150>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d203      	bcs.n	800367a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003672:	4a2e      	ldr	r2, [pc, #184]	@ (800372c <xTaskIncrementTick+0x15c>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003678:	e02f      	b.n	80036da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3304      	adds	r3, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe ff82 	bl	8002588 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	3318      	adds	r3, #24
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe ff79 	bl	8002588 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369a:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <xTaskIncrementTick+0x160>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d903      	bls.n	80036aa <xTaskIncrementTick+0xda>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	4a22      	ldr	r2, [pc, #136]	@ (8003730 <xTaskIncrementTick+0x160>)
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003734 <xTaskIncrementTick+0x164>)
 80036b8:	441a      	add	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	3304      	adds	r3, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f7fe ff04 	bl	80024ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <xTaskIncrementTick+0x168>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d3b8      	bcc.n	8003646 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d8:	e7b5      	b.n	8003646 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036da:	4b17      	ldr	r3, [pc, #92]	@ (8003738 <xTaskIncrementTick+0x168>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e0:	4914      	ldr	r1, [pc, #80]	@ (8003734 <xTaskIncrementTick+0x164>)
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d901      	bls.n	80036f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80036f6:	4b11      	ldr	r3, [pc, #68]	@ (800373c <xTaskIncrementTick+0x16c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80036fe:	2301      	movs	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e004      	b.n	800370e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003704:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <xTaskIncrementTick+0x170>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	4a0d      	ldr	r2, [pc, #52]	@ (8003740 <xTaskIncrementTick+0x170>)
 800370c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800370e:	697b      	ldr	r3, [r7, #20]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000d88 	.word	0x20000d88
 800371c:	20000d64 	.word	0x20000d64
 8003720:	20000d18 	.word	0x20000d18
 8003724:	20000d1c 	.word	0x20000d1c
 8003728:	20000d78 	.word	0x20000d78
 800372c:	20000d80 	.word	0x20000d80
 8003730:	20000d68 	.word	0x20000d68
 8003734:	20000890 	.word	0x20000890
 8003738:	2000088c 	.word	0x2000088c
 800373c:	20000d74 	.word	0x20000d74
 8003740:	20000d70 	.word	0x20000d70

08003744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800374a:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <vTaskSwitchContext+0xa8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003752:	4b27      	ldr	r3, [pc, #156]	@ (80037f0 <vTaskSwitchContext+0xac>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003758:	e042      	b.n	80037e0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800375a:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <vTaskSwitchContext+0xac>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003760:	4b24      	ldr	r3, [pc, #144]	@ (80037f4 <vTaskSwitchContext+0xb0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e011      	b.n	800378c <vTaskSwitchContext+0x48>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10b      	bne.n	8003786 <vTaskSwitchContext+0x42>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	607b      	str	r3, [r7, #4]
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	e7fd      	b.n	8003782 <vTaskSwitchContext+0x3e>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3b01      	subs	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	491a      	ldr	r1, [pc, #104]	@ (80037f8 <vTaskSwitchContext+0xb4>)
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0e3      	beq.n	8003768 <vTaskSwitchContext+0x24>
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4a13      	ldr	r2, [pc, #76]	@ (80037f8 <vTaskSwitchContext+0xb4>)
 80037ac:	4413      	add	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3308      	adds	r3, #8
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d104      	bne.n	80037d0 <vTaskSwitchContext+0x8c>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4a09      	ldr	r2, [pc, #36]	@ (80037fc <vTaskSwitchContext+0xb8>)
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4a06      	ldr	r2, [pc, #24]	@ (80037f4 <vTaskSwitchContext+0xb0>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	20000d88 	.word	0x20000d88
 80037f0:	20000d74 	.word	0x20000d74
 80037f4:	20000d68 	.word	0x20000d68
 80037f8:	20000890 	.word	0x20000890
 80037fc:	2000088c 	.word	0x2000088c

08003800 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10b      	bne.n	8003828 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
}
 8003822:	bf00      	nop
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003828:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <vTaskPlaceOnEventList+0x48>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3318      	adds	r3, #24
 800382e:	4619      	mov	r1, r3
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7fe fe70 	bl	8002516 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003836:	2101      	movs	r1, #1
 8003838:	6838      	ldr	r0, [r7, #0]
 800383a:	f000 fa81 	bl	8003d40 <prvAddCurrentTaskToDelayedList>
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	2000088c 	.word	0x2000088c

0800384c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	617b      	str	r3, [r7, #20]
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	e7fd      	b.n	8003872 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003876:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3318      	adds	r3, #24
 800387c:	4619      	mov	r1, r3
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7fe fe25 	bl	80024ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	68b8      	ldr	r0, [r7, #8]
 8003894:	f000 fa54 	bl	8003d40 <prvAddCurrentTaskToDelayedList>
	}
 8003898:	bf00      	nop
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	2000088c 	.word	0x2000088c

080038a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	60fb      	str	r3, [r7, #12]
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	e7fd      	b.n	80038ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3318      	adds	r3, #24
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fe56 	bl	8002588 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <xTaskRemoveFromEventList+0xb0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11d      	bne.n	8003920 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fe4d 	bl	8002588 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f2:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <xTaskRemoveFromEventList+0xb4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d903      	bls.n	8003902 <xTaskRemoveFromEventList+0x5e>
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	4a16      	ldr	r2, [pc, #88]	@ (8003958 <xTaskRemoveFromEventList+0xb4>)
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4a13      	ldr	r2, [pc, #76]	@ (800395c <xTaskRemoveFromEventList+0xb8>)
 8003910:	441a      	add	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	3304      	adds	r3, #4
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f7fe fdd8 	bl	80024ce <vListInsertEnd>
 800391e:	e005      	b.n	800392c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3318      	adds	r3, #24
 8003924:	4619      	mov	r1, r3
 8003926:	480e      	ldr	r0, [pc, #56]	@ (8003960 <xTaskRemoveFromEventList+0xbc>)
 8003928:	f7fe fdd1 	bl	80024ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003930:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <xTaskRemoveFromEventList+0xc0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	429a      	cmp	r2, r3
 8003938:	d905      	bls.n	8003946 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800393a:	2301      	movs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800393e:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <xTaskRemoveFromEventList+0xc4>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e001      	b.n	800394a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800394a:	697b      	ldr	r3, [r7, #20]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000d88 	.word	0x20000d88
 8003958:	20000d68 	.word	0x20000d68
 800395c:	20000890 	.word	0x20000890
 8003960:	20000d20 	.word	0x20000d20
 8003964:	2000088c 	.word	0x2000088c
 8003968:	20000d74 	.word	0x20000d74

0800396c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003974:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <vTaskInternalSetTimeOutState+0x24>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <vTaskInternalSetTimeOutState+0x28>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	20000d78 	.word	0x20000d78
 8003994:	20000d64 	.word	0x20000d64

08003998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	613b      	str	r3, [r7, #16]
}
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
 80039be:	e7fd      	b.n	80039bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	60fb      	str	r3, [r7, #12]
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	e7fd      	b.n	80039da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80039de:	f000 fe8b 	bl	80046f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a58 <xTaskCheckForTimeOut+0xc0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d102      	bne.n	8003a02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	e023      	b.n	8003a4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <xTaskCheckForTimeOut+0xc4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d007      	beq.n	8003a1e <xTaskCheckForTimeOut+0x86>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e015      	b.n	8003a4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d20b      	bcs.n	8003a40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	1ad2      	subs	r2, r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff99 	bl	800396c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	e004      	b.n	8003a4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a4a:	f000 fe87 	bl	800475c <vPortExitCritical>

	return xReturn;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000d64 	.word	0x20000d64
 8003a5c:	20000d78 	.word	0x20000d78

08003a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a64:	4b03      	ldr	r3, [pc, #12]	@ (8003a74 <vTaskMissedYield+0x14>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
}
 8003a6a:	bf00      	nop
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	20000d74 	.word	0x20000d74

08003a78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a80:	f000 f852 	bl	8003b28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <prvIdleTask+0x28>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d9f9      	bls.n	8003a80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <prvIdleTask+0x2c>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a9c:	e7f0      	b.n	8003a80 <prvIdleTask+0x8>
 8003a9e:	bf00      	nop
 8003aa0:	20000890 	.word	0x20000890
 8003aa4:	e000ed04 	.word	0xe000ed04

08003aa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	e00c      	b.n	8003ace <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4a12      	ldr	r2, [pc, #72]	@ (8003b08 <prvInitialiseTaskLists+0x60>)
 8003ac0:	4413      	add	r3, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fcd6 	bl	8002474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3301      	adds	r3, #1
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b37      	cmp	r3, #55	@ 0x37
 8003ad2:	d9ef      	bls.n	8003ab4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ad4:	480d      	ldr	r0, [pc, #52]	@ (8003b0c <prvInitialiseTaskLists+0x64>)
 8003ad6:	f7fe fccd 	bl	8002474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ada:	480d      	ldr	r0, [pc, #52]	@ (8003b10 <prvInitialiseTaskLists+0x68>)
 8003adc:	f7fe fcca 	bl	8002474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ae0:	480c      	ldr	r0, [pc, #48]	@ (8003b14 <prvInitialiseTaskLists+0x6c>)
 8003ae2:	f7fe fcc7 	bl	8002474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ae6:	480c      	ldr	r0, [pc, #48]	@ (8003b18 <prvInitialiseTaskLists+0x70>)
 8003ae8:	f7fe fcc4 	bl	8002474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003aec:	480b      	ldr	r0, [pc, #44]	@ (8003b1c <prvInitialiseTaskLists+0x74>)
 8003aee:	f7fe fcc1 	bl	8002474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003af2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <prvInitialiseTaskLists+0x78>)
 8003af4:	4a05      	ldr	r2, [pc, #20]	@ (8003b0c <prvInitialiseTaskLists+0x64>)
 8003af6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <prvInitialiseTaskLists+0x7c>)
 8003afa:	4a05      	ldr	r2, [pc, #20]	@ (8003b10 <prvInitialiseTaskLists+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000890 	.word	0x20000890
 8003b0c:	20000cf0 	.word	0x20000cf0
 8003b10:	20000d04 	.word	0x20000d04
 8003b14:	20000d20 	.word	0x20000d20
 8003b18:	20000d34 	.word	0x20000d34
 8003b1c:	20000d4c 	.word	0x20000d4c
 8003b20:	20000d18 	.word	0x20000d18
 8003b24:	20000d1c 	.word	0x20000d1c

08003b28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b2e:	e019      	b.n	8003b64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b30:	f000 fde2 	bl	80046f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b34:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <prvCheckTasksWaitingTermination+0x50>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe fd21 	bl	8002588 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b46:	4b0d      	ldr	r3, [pc, #52]	@ (8003b7c <prvCheckTasksWaitingTermination+0x54>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b7c <prvCheckTasksWaitingTermination+0x54>)
 8003b4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b50:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <prvCheckTasksWaitingTermination+0x58>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	4a0a      	ldr	r2, [pc, #40]	@ (8003b80 <prvCheckTasksWaitingTermination+0x58>)
 8003b58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b5a:	f000 fdff 	bl	800475c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f810 	bl	8003b84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <prvCheckTasksWaitingTermination+0x58>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e1      	bne.n	8003b30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000d34 	.word	0x20000d34
 8003b7c:	20000d60 	.word	0x20000d60
 8003b80:	20000d48 	.word	0x20000d48

08003b84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 ff9c 	bl	8004ad8 <vPortFree>
				vPortFree( pxTCB );
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 ff99 	bl	8004ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ba6:	e019      	b.n	8003bdc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d103      	bne.n	8003bba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 ff90 	bl	8004ad8 <vPortFree>
	}
 8003bb8:	e010      	b.n	8003bdc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d00b      	beq.n	8003bdc <prvDeleteTCB+0x58>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
}
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <prvDeleteTCB+0x54>
	}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bea:	4b0c      	ldr	r3, [pc, #48]	@ (8003c1c <prvResetNextTaskUnblockTime+0x38>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <prvResetNextTaskUnblockTime+0x3c>)
 8003bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bfc:	e008      	b.n	8003c10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bfe:	4b07      	ldr	r3, [pc, #28]	@ (8003c1c <prvResetNextTaskUnblockTime+0x38>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a04      	ldr	r2, [pc, #16]	@ (8003c20 <prvResetNextTaskUnblockTime+0x3c>)
 8003c0e:	6013      	str	r3, [r2, #0]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	20000d18 	.word	0x20000d18
 8003c20:	20000d80 	.word	0x20000d80

08003c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <xTaskGetSchedulerState+0x34>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c32:	2301      	movs	r3, #1
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	e008      	b.n	8003c4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c38:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <xTaskGetSchedulerState+0x38>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c40:	2302      	movs	r3, #2
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	e001      	b.n	8003c4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c4a:	687b      	ldr	r3, [r7, #4]
	}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	20000d6c 	.word	0x20000d6c
 8003c5c:	20000d88 	.word	0x20000d88

08003c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d058      	beq.n	8003d28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c76:	4b2f      	ldr	r3, [pc, #188]	@ (8003d34 <xTaskPriorityDisinherit+0xd4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d00b      	beq.n	8003c98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	60bb      	str	r3, [r7, #8]
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d02c      	beq.n	8003d28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d128      	bne.n	8003d28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fc54 	bl	8002588 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <xTaskPriorityDisinherit+0xd8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d903      	bls.n	8003d08 <xTaskPriorityDisinherit+0xa8>
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	4a0c      	ldr	r2, [pc, #48]	@ (8003d38 <xTaskPriorityDisinherit+0xd8>)
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4a09      	ldr	r2, [pc, #36]	@ (8003d3c <xTaskPriorityDisinherit+0xdc>)
 8003d16:	441a      	add	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f7fe fbd5 	bl	80024ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d28:	697b      	ldr	r3, [r7, #20]
	}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	2000088c 	.word	0x2000088c
 8003d38:	20000d68 	.word	0x20000d68
 8003d3c:	20000890 	.word	0x20000890

08003d40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d4a:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d50:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fc16 	bl	8002588 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d10a      	bne.n	8003d7a <prvAddCurrentTaskToDelayedList+0x3a>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4819      	ldr	r0, [pc, #100]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d74:	f7fe fbab 	bl	80024ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d78:	e026      	b.n	8003dc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4413      	add	r3, r2
 8003d80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d82:	4b14      	ldr	r3, [pc, #80]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d209      	bcs.n	8003da6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d92:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	f7fe fbb9 	bl	8002516 <vListInsert>
}
 8003da4:	e010      	b.n	8003dc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da6:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7fe fbaf 	bl	8002516 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003db8:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d202      	bcs.n	8003dc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003dc2:	4a08      	ldr	r2, [pc, #32]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	6013      	str	r3, [r2, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000d64 	.word	0x20000d64
 8003dd4:	2000088c 	.word	0x2000088c
 8003dd8:	20000d4c 	.word	0x20000d4c
 8003ddc:	20000d1c 	.word	0x20000d1c
 8003de0:	20000d18 	.word	0x20000d18
 8003de4:	20000d80 	.word	0x20000d80

08003de8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	@ 0x28
 8003dec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003df2:	f000 fb13 	bl	800441c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003df6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e6c <xTimerCreateTimerTask+0x84>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d021      	beq.n	8003e42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e06:	1d3a      	adds	r2, r7, #4
 8003e08:	f107 0108 	add.w	r1, r7, #8
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe fb15 	bl	8002440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	9202      	str	r2, [sp, #8]
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	2302      	movs	r3, #2
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2300      	movs	r3, #0
 8003e26:	460a      	mov	r2, r1
 8003e28:	4911      	ldr	r1, [pc, #68]	@ (8003e70 <xTimerCreateTimerTask+0x88>)
 8003e2a:	4812      	ldr	r0, [pc, #72]	@ (8003e74 <xTimerCreateTimerTask+0x8c>)
 8003e2c:	f7ff f8d0 	bl	8002fd0 <xTaskCreateStatic>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4a11      	ldr	r2, [pc, #68]	@ (8003e78 <xTimerCreateTimerTask+0x90>)
 8003e34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e36:	4b10      	ldr	r3, [pc, #64]	@ (8003e78 <xTimerCreateTimerTask+0x90>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	613b      	str	r3, [r7, #16]
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003e60:	697b      	ldr	r3, [r7, #20]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000dbc 	.word	0x20000dbc
 8003e70:	08004dd8 	.word	0x08004dd8
 8003e74:	08003fb5 	.word	0x08003fb5
 8003e78:	20000dc0 	.word	0x20000dc0

08003e7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	@ 0x28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <xTimerGenericCommand+0x30>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	623b      	str	r3, [r7, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	e7fd      	b.n	8003ea8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003eac:	4b19      	ldr	r3, [pc, #100]	@ (8003f14 <xTimerGenericCommand+0x98>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02a      	beq.n	8003f0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	dc18      	bgt.n	8003ef8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ec6:	f7ff fead 	bl	8003c24 <xTaskGetSchedulerState>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d109      	bne.n	8003ee4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ed0:	4b10      	ldr	r3, [pc, #64]	@ (8003f14 <xTimerGenericCommand+0x98>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	f107 0110 	add.w	r1, r7, #16
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003edc:	f7fe fc88 	bl	80027f0 <xQueueGenericSend>
 8003ee0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ee2:	e012      	b.n	8003f0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <xTimerGenericCommand+0x98>)
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	f107 0110 	add.w	r1, r7, #16
 8003eec:	2300      	movs	r3, #0
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f7fe fc7e 	bl	80027f0 <xQueueGenericSend>
 8003ef4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ef6:	e008      	b.n	8003f0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ef8:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <xTimerGenericCommand+0x98>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	f107 0110 	add.w	r1, r7, #16
 8003f00:	2300      	movs	r3, #0
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	f7fe fd76 	bl	80029f4 <xQueueGenericSendFromISR>
 8003f08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3728      	adds	r7, #40	@ 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000dbc 	.word	0x20000dbc

08003f18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f22:	4b23      	ldr	r3, [pc, #140]	@ (8003fb0 <prvProcessExpiredTimer+0x98>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe fb29 	bl	8002588 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d023      	beq.n	8003f8c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	18d1      	adds	r1, r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	6978      	ldr	r0, [r7, #20]
 8003f52:	f000 f8d5 	bl	8004100 <prvInsertTimerInActiveList>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	2100      	movs	r1, #0
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff88 	bl	8003e7c <xTimerGenericCommand>
 8003f6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d114      	bne.n	8003f9e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	60fb      	str	r3, [r7, #12]
}
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
 8003f8a:	e7fd      	b.n	8003f88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	6978      	ldr	r0, [r7, #20]
 8003fa4:	4798      	blx	r3
}
 8003fa6:	bf00      	nop
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000db4 	.word	0x20000db4

08003fb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fbc:	f107 0308 	add.w	r3, r7, #8
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f859 	bl	8004078 <prvGetNextExpireTime>
 8003fc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f805 	bl	8003fdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003fd2:	f000 f8d7 	bl	8004184 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fd6:	bf00      	nop
 8003fd8:	e7f0      	b.n	8003fbc <prvTimerTask+0x8>
	...

08003fdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003fe6:	f7ff fa37 	bl	8003458 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f866 	bl	80040c0 <prvSampleTimeNow>
 8003ff4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d130      	bne.n	800405e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <prvProcessTimerOrBlockTask+0x3c>
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	429a      	cmp	r2, r3
 8004008:	d806      	bhi.n	8004018 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800400a:	f7ff fa33 	bl	8003474 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ff81 	bl	8003f18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004016:	e024      	b.n	8004062 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800401e:	4b13      	ldr	r3, [pc, #76]	@ (800406c <prvProcessTimerOrBlockTask+0x90>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <prvProcessTimerOrBlockTask+0x50>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <prvProcessTimerOrBlockTask+0x52>
 800402c:	2300      	movs	r3, #0
 800402e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004030:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <prvProcessTimerOrBlockTask+0x94>)
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	4619      	mov	r1, r3
 800403e:	f7fe ff93 	bl	8002f68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004042:	f7ff fa17 	bl	8003474 <xTaskResumeAll>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800404c:	4b09      	ldr	r3, [pc, #36]	@ (8004074 <prvProcessTimerOrBlockTask+0x98>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	f3bf 8f6f 	isb	sy
}
 800405c:	e001      	b.n	8004062 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800405e:	f7ff fa09 	bl	8003474 <xTaskResumeAll>
}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000db8 	.word	0x20000db8
 8004070:	20000dbc 	.word	0x20000dbc
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004080:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <prvGetNextExpireTime+0x44>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <prvGetNextExpireTime+0x16>
 800408a:	2201      	movs	r2, #1
 800408c:	e000      	b.n	8004090 <prvGetNextExpireTime+0x18>
 800408e:	2200      	movs	r2, #0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800409c:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <prvGetNextExpireTime+0x44>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e001      	b.n	80040ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040ac:	68fb      	ldr	r3, [r7, #12]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000db4 	.word	0x20000db4

080040c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040c8:	f7ff fa72 	bl	80035b0 <xTaskGetTickCount>
 80040cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040ce:	4b0b      	ldr	r3, [pc, #44]	@ (80040fc <prvSampleTimeNow+0x3c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d205      	bcs.n	80040e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040d8:	f000 f93a 	bl	8004350 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e002      	b.n	80040ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040ea:	4a04      	ldr	r2, [pc, #16]	@ (80040fc <prvSampleTimeNow+0x3c>)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040f0:	68fb      	ldr	r3, [r7, #12]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000dc4 	.word	0x20000dc4

08004100 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d812      	bhi.n	800414c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	1ad2      	subs	r2, r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	429a      	cmp	r2, r3
 8004132:	d302      	bcc.n	800413a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e01b      	b.n	8004172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800413a:	4b10      	ldr	r3, [pc, #64]	@ (800417c <prvInsertTimerInActiveList+0x7c>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f7fe f9e6 	bl	8002516 <vListInsert>
 800414a:	e012      	b.n	8004172 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d206      	bcs.n	8004162 <prvInsertTimerInActiveList+0x62>
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d302      	bcc.n	8004162 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800415c:	2301      	movs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e007      	b.n	8004172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004162:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <prvInsertTimerInActiveList+0x80>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3304      	adds	r3, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f7fe f9d2 	bl	8002516 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004172:	697b      	ldr	r3, [r7, #20]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000db8 	.word	0x20000db8
 8004180:	20000db4 	.word	0x20000db4

08004184 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08e      	sub	sp, #56	@ 0x38
 8004188:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800418a:	e0ce      	b.n	800432a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	da19      	bge.n	80041c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	3304      	adds	r3, #4
 8004196:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	61fb      	str	r3, [r7, #28]
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	e7fd      	b.n	80041b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041bc:	6850      	ldr	r0, [r2, #4]
 80041be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c0:	6892      	ldr	r2, [r2, #8]
 80041c2:	4611      	mov	r1, r2
 80041c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f2c0 80ae 	blt.w	800432a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041dc:	3304      	adds	r3, #4
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe f9d2 	bl	8002588 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041e4:	463b      	mov	r3, r7
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff6a 	bl	80040c0 <prvSampleTimeNow>
 80041ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b09      	cmp	r3, #9
 80041f2:	f200 8097 	bhi.w	8004324 <prvProcessReceivedCommands+0x1a0>
 80041f6:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <prvProcessReceivedCommands+0x78>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004225 	.word	0x08004225
 8004200:	08004225 	.word	0x08004225
 8004204:	08004225 	.word	0x08004225
 8004208:	0800429b 	.word	0x0800429b
 800420c:	080042af 	.word	0x080042af
 8004210:	080042fb 	.word	0x080042fb
 8004214:	08004225 	.word	0x08004225
 8004218:	08004225 	.word	0x08004225
 800421c:	0800429b 	.word	0x0800429b
 8004220:	080042af 	.word	0x080042af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004226:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004232:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	18d1      	adds	r1, r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004244:	f7ff ff5c 	bl	8004100 <prvInsertTimerInActiveList>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d06c      	beq.n	8004328 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800424e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004254:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d061      	beq.n	8004328 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	441a      	add	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2300      	movs	r3, #0
 8004272:	2100      	movs	r1, #0
 8004274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004276:	f7ff fe01 	bl	8003e7c <xTimerGenericCommand>
 800427a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d152      	bne.n	8004328 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	61bb      	str	r3, [r7, #24]
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	e7fd      	b.n	8004296 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80042ac:	e03d      	b.n	800432a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	617b      	str	r3, [r7, #20]
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	18d1      	adds	r1, r2, r3
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042f4:	f7ff ff04 	bl	8004100 <prvInsertTimerInActiveList>
					break;
 80042f8:	e017      	b.n	800432a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d103      	bne.n	8004310 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800430a:	f000 fbe5 	bl	8004ad8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800430e:	e00c      	b.n	800432a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004312:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004322:	e002      	b.n	800432a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <prvProcessReceivedCommands+0x1a6>
					break;
 8004328:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800432a:	4b08      	ldr	r3, [pc, #32]	@ (800434c <prvProcessReceivedCommands+0x1c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	1d39      	adds	r1, r7, #4
 8004330:	2200      	movs	r2, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fbfc 	bl	8002b30 <xQueueReceive>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	f47f af26 	bne.w	800418c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3730      	adds	r7, #48	@ 0x30
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000dbc 	.word	0x20000dbc

08004350 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004356:	e049      	b.n	80043ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004358:	4b2e      	ldr	r3, [pc, #184]	@ (8004414 <prvSwitchTimerLists+0xc4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004362:	4b2c      	ldr	r3, [pc, #176]	@ (8004414 <prvSwitchTimerLists+0xc4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe f909 	bl	8002588 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02f      	beq.n	80043ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	429a      	cmp	r2, r3
 800439c:	d90e      	bls.n	80043bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <prvSwitchTimerLists+0xc4>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe f8ae 	bl	8002516 <vListInsert>
 80043ba:	e017      	b.n	80043ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043bc:	2300      	movs	r3, #0
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2300      	movs	r3, #0
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	2100      	movs	r1, #0
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff fd58 	bl	8003e7c <xTimerGenericCommand>
 80043cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	603b      	str	r3, [r7, #0]
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ec:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <prvSwitchTimerLists+0xc4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1b0      	bne.n	8004358 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043f6:	4b07      	ldr	r3, [pc, #28]	@ (8004414 <prvSwitchTimerLists+0xc4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <prvSwitchTimerLists+0xc8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a04      	ldr	r2, [pc, #16]	@ (8004414 <prvSwitchTimerLists+0xc4>)
 8004402:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004404:	4a04      	ldr	r2, [pc, #16]	@ (8004418 <prvSwitchTimerLists+0xc8>)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6013      	str	r3, [r2, #0]
}
 800440a:	bf00      	nop
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000db4 	.word	0x20000db4
 8004418:	20000db8 	.word	0x20000db8

0800441c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004422:	f000 f969 	bl	80046f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004426:	4b15      	ldr	r3, [pc, #84]	@ (800447c <prvCheckForValidListAndQueue+0x60>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d120      	bne.n	8004470 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800442e:	4814      	ldr	r0, [pc, #80]	@ (8004480 <prvCheckForValidListAndQueue+0x64>)
 8004430:	f7fe f820 	bl	8002474 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004434:	4813      	ldr	r0, [pc, #76]	@ (8004484 <prvCheckForValidListAndQueue+0x68>)
 8004436:	f7fe f81d 	bl	8002474 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800443a:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <prvCheckForValidListAndQueue+0x6c>)
 800443c:	4a10      	ldr	r2, [pc, #64]	@ (8004480 <prvCheckForValidListAndQueue+0x64>)
 800443e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004440:	4b12      	ldr	r3, [pc, #72]	@ (800448c <prvCheckForValidListAndQueue+0x70>)
 8004442:	4a10      	ldr	r2, [pc, #64]	@ (8004484 <prvCheckForValidListAndQueue+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004446:	2300      	movs	r3, #0
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <prvCheckForValidListAndQueue+0x74>)
 800444c:	4a11      	ldr	r2, [pc, #68]	@ (8004494 <prvCheckForValidListAndQueue+0x78>)
 800444e:	2110      	movs	r1, #16
 8004450:	200a      	movs	r0, #10
 8004452:	f7fe f92d 	bl	80026b0 <xQueueGenericCreateStatic>
 8004456:	4603      	mov	r3, r0
 8004458:	4a08      	ldr	r2, [pc, #32]	@ (800447c <prvCheckForValidListAndQueue+0x60>)
 800445a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800445c:	4b07      	ldr	r3, [pc, #28]	@ (800447c <prvCheckForValidListAndQueue+0x60>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004464:	4b05      	ldr	r3, [pc, #20]	@ (800447c <prvCheckForValidListAndQueue+0x60>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	490b      	ldr	r1, [pc, #44]	@ (8004498 <prvCheckForValidListAndQueue+0x7c>)
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fd52 	bl	8002f14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004470:	f000 f974 	bl	800475c <vPortExitCritical>
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000dbc 	.word	0x20000dbc
 8004480:	20000d8c 	.word	0x20000d8c
 8004484:	20000da0 	.word	0x20000da0
 8004488:	20000db4 	.word	0x20000db4
 800448c:	20000db8 	.word	0x20000db8
 8004490:	20000e68 	.word	0x20000e68
 8004494:	20000dc8 	.word	0x20000dc8
 8004498:	08004de0 	.word	0x08004de0

0800449c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3b04      	subs	r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b04      	subs	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0201 	bic.w	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004500 <pxPortInitialiseStack+0x64>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b14      	subs	r3, #20
 80044d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b04      	subs	r3, #4
 80044e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f06f 0202 	mvn.w	r2, #2
 80044ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b20      	subs	r3, #32
 80044f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	08004505 	.word	0x08004505

08004504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800450e:	4b13      	ldr	r3, [pc, #76]	@ (800455c <prvTaskExitError+0x58>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d00b      	beq.n	8004530 <prvTaskExitError+0x2c>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60fb      	str	r3, [r7, #12]
}
 800452a:	bf00      	nop
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <prvTaskExitError+0x28>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	60bb      	str	r3, [r7, #8]
}
 8004542:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004544:	bf00      	nop
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0fc      	beq.n	8004546 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000014 	.word	0x20000014

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	4770      	bx	lr
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst2>:
 8004580:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004588:	4808      	ldr	r0, [pc, #32]	@ (80045ac <prvPortStartFirstTask+0x24>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8814 	msr	CONTROL, r0
 800459a:	b662      	cpsie	i
 800459c:	b661      	cpsie	f
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	df00      	svc	0
 80045a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045aa:	bf00      	nop
 80045ac:	e000ed08 	.word	0xe000ed08

080045b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045b6:	4b47      	ldr	r3, [pc, #284]	@ (80046d4 <xPortStartScheduler+0x124>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a47      	ldr	r2, [pc, #284]	@ (80046d8 <xPortStartScheduler+0x128>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d10b      	bne.n	80045d8 <xPortStartScheduler+0x28>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	60fb      	str	r3, [r7, #12]
}
 80045d2:	bf00      	nop
 80045d4:	bf00      	nop
 80045d6:	e7fd      	b.n	80045d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045d8:	4b3e      	ldr	r3, [pc, #248]	@ (80046d4 <xPortStartScheduler+0x124>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a3f      	ldr	r2, [pc, #252]	@ (80046dc <xPortStartScheduler+0x12c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d10b      	bne.n	80045fa <xPortStartScheduler+0x4a>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	613b      	str	r3, [r7, #16]
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	e7fd      	b.n	80045f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045fa:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <xPortStartScheduler+0x130>)
 80045fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	22ff      	movs	r2, #255	@ 0xff
 800460a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800461c:	b2da      	uxtb	r2, r3
 800461e:	4b31      	ldr	r3, [pc, #196]	@ (80046e4 <xPortStartScheduler+0x134>)
 8004620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004622:	4b31      	ldr	r3, [pc, #196]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004628:	e009      	b.n	800463e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800462a:	4b2f      	ldr	r3, [pc, #188]	@ (80046e8 <xPortStartScheduler+0x138>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3b01      	subs	r3, #1
 8004630:	4a2d      	ldr	r2, [pc, #180]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004646:	2b80      	cmp	r3, #128	@ 0x80
 8004648:	d0ef      	beq.n	800462a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800464a:	4b27      	ldr	r3, [pc, #156]	@ (80046e8 <xPortStartScheduler+0x138>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	d00b      	beq.n	800466e <xPortStartScheduler+0xbe>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60bb      	str	r3, [r7, #8]
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	e7fd      	b.n	800466a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800466e:	4b1e      	ldr	r3, [pc, #120]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004678:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <xPortStartScheduler+0x138>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004680:	4a19      	ldr	r2, [pc, #100]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800468c:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <xPortStartScheduler+0x13c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a16      	ldr	r2, [pc, #88]	@ (80046ec <xPortStartScheduler+0x13c>)
 8004692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004698:	4b14      	ldr	r3, [pc, #80]	@ (80046ec <xPortStartScheduler+0x13c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a13      	ldr	r2, [pc, #76]	@ (80046ec <xPortStartScheduler+0x13c>)
 800469e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80046a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046a4:	f000 f8da 	bl	800485c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046a8:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <xPortStartScheduler+0x140>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046ae:	f000 f8f9 	bl	80048a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046b2:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <xPortStartScheduler+0x144>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a0f      	ldr	r2, [pc, #60]	@ (80046f4 <xPortStartScheduler+0x144>)
 80046b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80046bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046be:	f7ff ff63 	bl	8004588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046c2:	f7ff f83f 	bl	8003744 <vTaskSwitchContext>
	prvTaskExitError();
 80046c6:	f7ff ff1d 	bl	8004504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	e000ed00 	.word	0xe000ed00
 80046d8:	410fc271 	.word	0x410fc271
 80046dc:	410fc270 	.word	0x410fc270
 80046e0:	e000e400 	.word	0xe000e400
 80046e4:	20000eb8 	.word	0x20000eb8
 80046e8:	20000ebc 	.word	0x20000ebc
 80046ec:	e000ed20 	.word	0xe000ed20
 80046f0:	20000014 	.word	0x20000014
 80046f4:	e000ef34 	.word	0xe000ef34

080046f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <vPortEnterCritical+0x5c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	4a0e      	ldr	r2, [pc, #56]	@ (8004754 <vPortEnterCritical+0x5c>)
 800471a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800471c:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <vPortEnterCritical+0x5c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d110      	bne.n	8004746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004724:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <vPortEnterCritical+0x60>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <vPortEnterCritical+0x4e>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	603b      	str	r3, [r7, #0]
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <vPortEnterCritical+0x4a>
	}
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000014 	.word	0x20000014
 8004758:	e000ed04 	.word	0xe000ed04

0800475c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <vPortExitCritical+0x50>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <vPortExitCritical+0x26>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	607b      	str	r3, [r7, #4]
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	e7fd      	b.n	800477e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004782:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <vPortExitCritical+0x50>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3b01      	subs	r3, #1
 8004788:	4a08      	ldr	r2, [pc, #32]	@ (80047ac <vPortExitCritical+0x50>)
 800478a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <vPortExitCritical+0x50>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <vPortExitCritical+0x44>
 8004794:	2300      	movs	r3, #0
 8004796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f383 8811 	msr	BASEPRI, r3
}
 800479e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	20000014 	.word	0x20000014

080047b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047b0:	f3ef 8009 	mrs	r0, PSP
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4b15      	ldr	r3, [pc, #84]	@ (8004810 <pxCurrentTCBConst>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f01e 0f10 	tst.w	lr, #16
 80047c0:	bf08      	it	eq
 80047c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	6010      	str	r0, [r2, #0]
 80047cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80047d4:	f380 8811 	msr	BASEPRI, r0
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f7fe ffb0 	bl	8003744 <vTaskSwitchContext>
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f380 8811 	msr	BASEPRI, r0
 80047ec:	bc09      	pop	{r0, r3}
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	6808      	ldr	r0, [r1, #0]
 80047f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f6:	f01e 0f10 	tst.w	lr, #16
 80047fa:	bf08      	it	eq
 80047fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004800:	f380 8809 	msr	PSP, r0
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w

08004810 <pxCurrentTCBConst>:
 8004810:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	607b      	str	r3, [r7, #4]
}
 8004830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004832:	f7fe fecd 	bl	80035d0 <xTaskIncrementTick>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <xPortSysTickHandler+0x40>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	2300      	movs	r3, #0
 8004846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f383 8811 	msr	BASEPRI, r3
}
 800484e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <vPortSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <vPortSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	@ (800489c <vPortSetupTimerInterrupt+0x40>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	4a09      	ldr	r2, [pc, #36]	@ (80048a0 <vPortSetupTimerInterrupt+0x44>)
 800487a:	3b01      	subs	r3, #1
 800487c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800487e:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	20000008 	.word	0x20000008
 800489c:	10624dd3 	.word	0x10624dd3
 80048a0:	e000e014 	.word	0xe000e014

080048a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80048b4 <vPortEnableVFP+0x10>
 80048a8:	6801      	ldr	r1, [r0, #0]
 80048aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80048ae:	6001      	str	r1, [r0, #0]
 80048b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048b2:	bf00      	nop
 80048b4:	e000ed88 	.word	0xe000ed88

080048b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048be:	f3ef 8305 	mrs	r3, IPSR
 80048c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b0f      	cmp	r3, #15
 80048c8:	d915      	bls.n	80048f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ca:	4a18      	ldr	r2, [pc, #96]	@ (800492c <vPortValidateInterruptPriority+0x74>)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048d4:	4b16      	ldr	r3, [pc, #88]	@ (8004930 <vPortValidateInterruptPriority+0x78>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	7afa      	ldrb	r2, [r7, #11]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20b      	bcs.n	80048f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	607b      	str	r3, [r7, #4]
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	e7fd      	b.n	80048f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004934 <vPortValidateInterruptPriority+0x7c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004938 <vPortValidateInterruptPriority+0x80>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d90b      	bls.n	800491e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	603b      	str	r3, [r7, #0]
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <vPortValidateInterruptPriority+0x62>
	}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e3f0 	.word	0xe000e3f0
 8004930:	20000eb8 	.word	0x20000eb8
 8004934:	e000ed0c 	.word	0xe000ed0c
 8004938:	20000ebc 	.word	0x20000ebc

0800493c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	@ 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004948:	f7fe fd86 	bl	8003458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800494c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ac0 <pvPortMalloc+0x184>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004954:	f000 f924 	bl	8004ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004958:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac4 <pvPortMalloc+0x188>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 8095 	bne.w	8004a90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01e      	beq.n	80049aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800496c:	2208      	movs	r2, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f023 0307 	bic.w	r3, r3, #7
 8004984:	3308      	adds	r3, #8
 8004986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <pvPortMalloc+0x6e>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	617b      	str	r3, [r7, #20]
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	e7fd      	b.n	80049a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d06f      	beq.n	8004a90 <pvPortMalloc+0x154>
 80049b0:	4b45      	ldr	r3, [pc, #276]	@ (8004ac8 <pvPortMalloc+0x18c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d86a      	bhi.n	8004a90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049ba:	4b44      	ldr	r3, [pc, #272]	@ (8004acc <pvPortMalloc+0x190>)
 80049bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049be:	4b43      	ldr	r3, [pc, #268]	@ (8004acc <pvPortMalloc+0x190>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049c4:	e004      	b.n	80049d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d903      	bls.n	80049e2 <pvPortMalloc+0xa6>
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f1      	bne.n	80049c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049e2:	4b37      	ldr	r3, [pc, #220]	@ (8004ac0 <pvPortMalloc+0x184>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d051      	beq.n	8004a90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2208      	movs	r2, #8
 80049f2:	4413      	add	r3, r2
 80049f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	1ad2      	subs	r2, r2, r3
 8004a06:	2308      	movs	r3, #8
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d920      	bls.n	8004a50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4413      	add	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <pvPortMalloc+0xfc>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	613b      	str	r3, [r7, #16]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a4a:	69b8      	ldr	r0, [r7, #24]
 8004a4c:	f000 f90a 	bl	8004c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac8 <pvPortMalloc+0x18c>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <pvPortMalloc+0x18c>)
 8004a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac8 <pvPortMalloc+0x18c>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad0 <pvPortMalloc+0x194>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d203      	bcs.n	8004a72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ac8 <pvPortMalloc+0x18c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ad0 <pvPortMalloc+0x194>)
 8004a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	4b13      	ldr	r3, [pc, #76]	@ (8004ac4 <pvPortMalloc+0x188>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a86:	4b13      	ldr	r3, [pc, #76]	@ (8004ad4 <pvPortMalloc+0x198>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	4a11      	ldr	r2, [pc, #68]	@ (8004ad4 <pvPortMalloc+0x198>)
 8004a8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a90:	f7fe fcf0 	bl	8003474 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <pvPortMalloc+0x17a>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60fb      	str	r3, [r7, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <pvPortMalloc+0x176>
	return pvReturn;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	@ 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20001a80 	.word	0x20001a80
 8004ac4:	20001a94 	.word	0x20001a94
 8004ac8:	20001a84 	.word	0x20001a84
 8004acc:	20001a78 	.word	0x20001a78
 8004ad0:	20001a88 	.word	0x20001a88
 8004ad4:	20001a8c 	.word	0x20001a8c

08004ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04f      	beq.n	8004b8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004aea:	2308      	movs	r3, #8
 8004aec:	425b      	negs	r3, r3
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4413      	add	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	4b25      	ldr	r3, [pc, #148]	@ (8004b94 <vPortFree+0xbc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10b      	bne.n	8004b1e <vPortFree+0x46>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60fb      	str	r3, [r7, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <vPortFree+0x66>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60bb      	str	r3, [r7, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b14      	ldr	r3, [pc, #80]	@ (8004b94 <vPortFree+0xbc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11a      	bne.n	8004b8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	4b0e      	ldr	r3, [pc, #56]	@ (8004b94 <vPortFree+0xbc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b64:	f7fe fc78 	bl	8003458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <vPortFree+0xc0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	4a09      	ldr	r2, [pc, #36]	@ (8004b98 <vPortFree+0xc0>)
 8004b74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b76:	6938      	ldr	r0, [r7, #16]
 8004b78:	f000 f874 	bl	8004c64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b7c:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <vPortFree+0xc4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a06      	ldr	r2, [pc, #24]	@ (8004b9c <vPortFree+0xc4>)
 8004b84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b86:	f7fe fc75 	bl	8003474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20001a94 	.word	0x20001a94
 8004b98:	20001a84 	.word	0x20001a84
 8004b9c:	20001a90 	.word	0x20001a90

08004ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ba6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bac:	4b27      	ldr	r3, [pc, #156]	@ (8004c4c <prvHeapInit+0xac>)
 8004bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3307      	adds	r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	4a1f      	ldr	r2, [pc, #124]	@ (8004c4c <prvHeapInit+0xac>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <prvHeapInit+0xb0>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004bde:	4b1c      	ldr	r3, [pc, #112]	@ (8004c50 <prvHeapInit+0xb0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4413      	add	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bec:	2208      	movs	r2, #8
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a15      	ldr	r2, [pc, #84]	@ (8004c54 <prvHeapInit+0xb4>)
 8004c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c02:	4b14      	ldr	r3, [pc, #80]	@ (8004c54 <prvHeapInit+0xb4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c0a:	4b12      	ldr	r3, [pc, #72]	@ (8004c54 <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <prvHeapInit+0xb4>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c58 <prvHeapInit+0xb8>)
 8004c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a09      	ldr	r2, [pc, #36]	@ (8004c5c <prvHeapInit+0xbc>)
 8004c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c38:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <prvHeapInit+0xc0>)
 8004c3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000ec0 	.word	0x20000ec0
 8004c50:	20001a78 	.word	0x20001a78
 8004c54:	20001a80 	.word	0x20001a80
 8004c58:	20001a88 	.word	0x20001a88
 8004c5c:	20001a84 	.word	0x20001a84
 8004c60:	20001a94 	.word	0x20001a94

08004c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c6c:	4b28      	ldr	r3, [pc, #160]	@ (8004d10 <prvInsertBlockIntoFreeList+0xac>)
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e002      	b.n	8004c78 <prvInsertBlockIntoFreeList+0x14>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d8f7      	bhi.n	8004c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d108      	bne.n	8004ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d118      	bne.n	8004cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	@ (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d00d      	beq.n	8004ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e008      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d002      	beq.n	8004d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20001a78 	.word	0x20001a78
 8004d14:	20001a80 	.word	0x20001a80

08004d18 <memset>:
 8004d18:	4402      	add	r2, r0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d100      	bne.n	8004d22 <memset+0xa>
 8004d20:	4770      	bx	lr
 8004d22:	f803 1b01 	strb.w	r1, [r3], #1
 8004d26:	e7f9      	b.n	8004d1c <memset+0x4>

08004d28 <__libc_init_array>:
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8004d60 <__libc_init_array+0x38>)
 8004d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8004d64 <__libc_init_array+0x3c>)
 8004d2e:	1b64      	subs	r4, r4, r5
 8004d30:	10a4      	asrs	r4, r4, #2
 8004d32:	2600      	movs	r6, #0
 8004d34:	42a6      	cmp	r6, r4
 8004d36:	d109      	bne.n	8004d4c <__libc_init_array+0x24>
 8004d38:	4d0b      	ldr	r5, [pc, #44]	@ (8004d68 <__libc_init_array+0x40>)
 8004d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8004d6c <__libc_init_array+0x44>)
 8004d3c:	f000 f826 	bl	8004d8c <_init>
 8004d40:	1b64      	subs	r4, r4, r5
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	2600      	movs	r6, #0
 8004d46:	42a6      	cmp	r6, r4
 8004d48:	d105      	bne.n	8004d56 <__libc_init_array+0x2e>
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}
 8004d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d50:	4798      	blx	r3
 8004d52:	3601      	adds	r6, #1
 8004d54:	e7ee      	b.n	8004d34 <__libc_init_array+0xc>
 8004d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5a:	4798      	blx	r3
 8004d5c:	3601      	adds	r6, #1
 8004d5e:	e7f2      	b.n	8004d46 <__libc_init_array+0x1e>
 8004d60:	08004e80 	.word	0x08004e80
 8004d64:	08004e80 	.word	0x08004e80
 8004d68:	08004e80 	.word	0x08004e80
 8004d6c:	08004e84 	.word	0x08004e84

08004d70 <memcpy>:
 8004d70:	440a      	add	r2, r1
 8004d72:	4291      	cmp	r1, r2
 8004d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d78:	d100      	bne.n	8004d7c <memcpy+0xc>
 8004d7a:	4770      	bx	lr
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d86:	4291      	cmp	r1, r2
 8004d88:	d1f9      	bne.n	8004d7e <memcpy+0xe>
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <_init>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr

08004d98 <_fini>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	bf00      	nop
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr
